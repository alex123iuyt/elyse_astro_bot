"use client";

import { useRouter } from "next/navigation";
import { usePathname } from "next/navigation";

export const useSmartBack = (fallback: string) => {
  const router = useRouter();
  const pathname = usePathname();
  
  return () => {
    console.log('üîô Smart back called from:', pathname, 'fallback:', fallback);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      if (window.history.length > 1) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º referrer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å —Ç–æ–≥–æ –∂–µ –¥–æ–º–µ–Ω–∞
        const ref = document.referrer;
        if (ref && ref.length > 0) {
          try {
            const refUrl = new URL(ref);
            const sameOrigin = refUrl.origin === location.origin;
            
            // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –µ—Å–ª–∏ referrer –ø—É—Å—Ç–æ–π
            if (sameOrigin && !ref.includes("/auth") && !ref.includes("/login")) {
              console.log('üîô Using browser back, referrer:', ref);
              router.back();
              return;
            }
          } catch (urlError) {
            console.warn('‚ö†Ô∏è Invalid referrer URL:', ref);
          }
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å back, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      console.log('üîô Using fallback navigation to:', fallback);
      router.replace(fallback);
      
    } catch (error) {
      console.error('‚ùå Smart back error:', error);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      router.replace(fallback);
    }
  };
};





