// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(VIEWER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Астрологические данные
  birthDate    String?
  birthTime    String?
  birthCity    String?
  birthCountry String?
  zodiacSign   String?
  isPremium    Boolean @default(false)

  // Relations
  contentItems    ContentItem[]    @relation("ContentCreator")
  contentVersions ContentVersion[] @relation("VersionCreator")
  auditLogs       AuditLog[]       @relation("AuditUser")
  pushJobs        PushJob[]        @relation("PushUser")

  @@map("users")
}

model ContentItem {
  id          String      @id @default(cuid())
  type        ContentType
  title       String
  slug        String?     @unique
  status      ContentStatus @default(DRAFT)
  version     Int         @default(1)
  payload     Json
  targeting   Json?
  schedule    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  updatedById String
  publishedAt DateTime?

  // Relations
  updatedBy     User             @relation("ContentCreator", fields: [updatedById], references: [id])
  versions      ContentVersion[]
  mediaAssets   MediaAsset[]
  pushTemplates PushTemplate[]

  @@map("content_items")
}

model ContentVersion {
  id          String      @id @default(cuid())
  contentId   String
  version     Int
  status      ContentStatus
  payload     Json
  targeting   Json?
  schedule    Json?
  createdAt   DateTime    @default(now())
  updatedById String

  // Relations
  content   ContentItem @relation(fields: [contentId], references: [id], onDelete: Cascade)
  updatedBy User        @relation("VersionCreator", fields: [updatedById], references: [id])

  @@unique([contentId, version])
  @@map("content_versions")
}

model MediaAsset {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  meta      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contentItems ContentItem[]

  @@map("media_assets")
}

model PushTemplate {
  id        String   @id @default(cuid())
  key       String   @unique
  text      String
  trigger   Json
  deeplink  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contentItem ContentItem? @relation(fields: [contentItemId], references: [id])
  contentItemId String?
  pushJobs     PushJob[]

  @@map("push_templates")
}

model PushJob {
  id          String      @id @default(cuid())
  templateId  String
  userId      String?
  scheduledAt DateTime
  status      PushJobStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  template PushTemplate @relation(fields: [templateId], references: [id])
  user     User?        @relation("PushUser", fields: [userId], references: [id])

  @@map("push_jobs")
}

model AuditLog {
  id        String      @id @default(cuid())
  action    String
  entity    String
  entityId  String?
  details   Json?
  createdAt DateTime    @default(now())
  userId    String

  // Relations
  user User @relation("AuditUser", fields: [userId], references: [id])

  @@map("audit_logs")
}

enum Role {
  VIEWER
  EDITOR
  ADMIN
}

enum ContentType {
  // Новые типы для ежедневного контента
  DAILY_TIP_DOMAIN      // Совет дня по домену (любовь, баланс, удача)
  DAILY_FORECAST_DOMAIN // Прогноз на сегодня по домену (общий, любовь, карьера)
  LUNAR_TODAY          // Лунный календарь на сегодня
  STORYLINE            // Сторис/сторилайны
  
  // Существующие типы
  DAILY_FORECAST
  DAILY_FORECAST_ZODIAC
  WEEKLY_FORECAST
  WEEKLY_FORECAST_ZODIAC
  MONTHLY_FORECAST
  MONTHLY_FORECAST_ZODIAC
  YEARLY_FORECAST
  YEARLY_FORECAST_ZODIAC
  LUNAR_TIP
  ASTRO_EVENT
  COMPATIBILITY
  NATAL_TEMPLATE
  ONBOARDING_STEP
  PUSH_TEMPLATE
  ARTICLE
  FAQ_ITEM
  MARKETING_BANNER
  UI_COPY
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PushJobStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

