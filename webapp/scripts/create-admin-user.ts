import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function createAdminUser() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é ADMIN...')

    const email = 'admin@elyse.com'
    const password = 'admin123'
    const name = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = await prisma.user.findUnique({
      where: { email }
    })

    if (existingUser) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
      console.log(`üìä ID: ${existingUser.id}`)
      console.log(`üë§ –†–æ–ª—å: ${existingUser.role}`)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ ADMIN –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (existingUser.role !== 'ADMIN') {
        await prisma.user.update({
          where: { id: existingUser.id },
          data: { role: 'ADMIN' }
        })
        console.log('‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ADMIN')
      }
      
      return
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π
    const user = await prisma.user.create({
      data: {
        email,
        name,
        role: 'ADMIN'
      }
    })

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!')
    console.log(`üìä ID: ${user.id}`)
    console.log(`üìß Email: ${user.email}`)
    console.log(`üë§ –ò–º—è: ${user.name}`)
    console.log(`üîë –†–æ–ª—å: ${user.role}`)
    console.log(`üîê –ü–∞—Ä–æ–ª—å: ${password}`)
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É:')
    console.log(`   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/auth`)
    console.log(`   2. –í–≤–µ–¥–∏—Ç–µ email: ${email}`)
    console.log(`   3. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ${password}`)
    console.log(`   4. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ http://localhost:3000/admin/content`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
createAdminUser()
  .then(() => {
    console.log('\n‚ú® –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })



