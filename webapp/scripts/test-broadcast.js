#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
 * –ó–∞–ø—É—Å–∫: node scripts/test-broadcast.js
 */

const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';

async function testBroadcast() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏...\n');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏...');
    const createResponse = await fetch(`${BASE_URL}/api/admin/notifications`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        title: '–¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',
        text: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏',
        segment: 'all',
        buttonText: '–û—Ç–∫—Ä—ã—Ç—å',
        buttonUrl: 'https://example.com',
        parseMode: 'HTML'
      })
    });

    const createData = await createResponse.json();
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', createData);

    if (!createData.success) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: ${createData.error}`);
    }

    const { jobId, total } = createData;
    console.log(`üìä Job ID: ${jobId}, –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${total}\n`);

    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    console.log('2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    const processResponse = await fetch(`${BASE_URL}/api/admin/notifications/process`, {
      method: 'POST'
    });

    const processData = await processResponse.json();
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞:', processData);

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ SSE
    console.log('3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SSE –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...');
    
    return new Promise((resolve, reject) => {
      const eventSource = new EventSource(`${BASE_URL}/api/admin/notifications/sse/${jobId}`);
      
      eventSource.addEventListener('progress', (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log('üìà –ü—Ä–æ–≥—Ä–µ—Å—Å:', data);
          
          if (data.status === 'done' || data.status === 'failed') {
            console.log(`\nüèÅ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${data.status}`);
            console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
            console.log(`   - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${data.sent}/${data.total}`);
            console.log(`   - –û—à–∏–±–æ–∫: ${data.failed}`);
            console.log(`   - –°—Ç–∞—Ç—É—Å: ${data.status}`);
            
            eventSource.close();
            resolve(data);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SSE –¥–∞–Ω–Ω—ã—Ö:', error);
        }
      });

      eventSource.addEventListener('error', (error) => {
        console.error('‚ùå SSE –æ—à–∏–±–∫–∞:', error);
        eventSource.close();
        reject(error);
      });

      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ SSE –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      setTimeout(() => {
        console.log('‚è∞ –¢–∞–π–º–∞—É—Ç SSE, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø—Ä—è–º—É—é...');
        eventSource.close();
        checkJobStatus(jobId).then(resolve).catch(reject);
      }, 10000);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    throw error;
  }
}

async function checkJobStatus(jobId) {
  try {
    const response = await fetch(`${BASE_URL}/api/admin/notifications/history`);
    const data = await response.json();
    
    const job = data.find(j => j.id === jobId);
    if (job) {
      console.log('üìä –°—Ç–∞—Ç—É—Å job –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:', job);
      return job;
    } else {
      throw new Error('Job –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    throw error;
  }
}

async function testDatabaseConnection() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const response = await fetch(`${BASE_URL}/api/admin/stats`);
    const data = await response.json();
    
    if (data.success) {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', data.data);
    } else {
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error);
    throw error;
  }
}

async function testBotToken() {
  console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Telegram API
    const response = await fetch(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/getMe`);
    const data = await response.json();
    
    if (data.ok) {
      console.log('‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤–∞–ª–∏–¥–µ–Ω');
      console.log('üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', data.result);
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ Telegram API: ${data.description}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞:', error);
    throw error;
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    await testDatabaseConnection();
    console.log('');
    
    await testBotToken();
    console.log('');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    await testBroadcast();
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\nüí• –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { testBroadcast, testDatabaseConnection, testBotToken };






