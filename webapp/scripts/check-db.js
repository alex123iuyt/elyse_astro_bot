#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∏
 * –ó–∞–ø—É—Å–∫: node scripts/check-db.js
 */

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ES –º–æ–¥—É–ª—è–º–∏
async function getDatabase() {
  try {
    const { getDatabase } = await import('../lib/database.js');
    return getDatabase();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ database:', error.message);
    throw error;
  }
}

async function checkDatabase() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∏...\n');

  try {
    const db = await getDatabase();
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É broadcast_jobs
    console.log('1Ô∏è‚É£ –¢–∞–±–ª–∏—Ü–∞ broadcast_jobs:');
    const jobs = await db.all(`SELECT * FROM broadcast_jobs ORDER BY created_at DESC LIMIT 5`);
    
    if (jobs.length === 0) {
      console.log('   ‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö');
    } else {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${jobs.length} –∑–∞–ø–∏—Å–µ–π:`);
      jobs.forEach(job => {
        console.log(`      - ID: ${job.id}, –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${job.title}", –°—Ç–∞—Ç—É—Å: ${job.status}`);
        console.log(`        –°–æ–∑–¥–∞–Ω–æ: ${job.created_at}, –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${job.sent || 0}, –û—à–∏–±–æ–∫: ${job.failed || 0}`);
      });
    }
    console.log('');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É broadcast_recipients
    console.log('2Ô∏è‚É£ –¢–∞–±–ª–∏—Ü–∞ broadcast_recipients:');
    const recipients = await db.all(`
      SELECT 
        job_id,
        COUNT(*) as total,
        SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending,
        SUM(CASE WHEN status = 'sent' THEN 1 ELSE 0 END) as sent,
        SUM(CASE WHEN status = 'failed' THEN 1 ELSE 0 END) as failed
      FROM broadcast_recipients 
      GROUP BY job_id 
      ORDER BY job_id DESC 
      LIMIT 5
    `);
    
    if (recipients.length === 0) {
      console.log('   ‚ùå –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
    } else {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${recipients.length} job'–æ–≤ —Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏:`);
      recipients.forEach(rec => {
        console.log(`      - Job ID: ${rec.job_id}, –í—Å–µ–≥–æ: ${rec.total}, –û–∂–∏–¥–∞—é—Ç: ${rec.pending}, –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${rec.sent}, –û—à–∏–±–æ–∫: ${rec.failed}`);
      });
    }
    console.log('');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ job'–∞
    if (jobs.length > 0) {
      const lastJob = jobs[0];
      console.log(`3Ô∏è‚É£ –î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ job'–∞ (ID: ${lastJob.id}):`);
      
      const jobRecipients = await db.all(`
        SELECT status, COUNT(*) as count, GROUP_CONCAT(error) as errors
        FROM broadcast_recipients 
        WHERE job_id = ? 
        GROUP BY status
      `, [lastJob.id]);
      
      jobRecipients.forEach(rec => {
        console.log(`   - ${rec.status}: ${rec.count}`);
        if (rec.errors && rec.status === 'failed') {
          console.log(`     –û—à–∏–±–∫–∏: ${rec.errors}`);
        }
      });
      console.log('');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
    console.log('4Ô∏è‚É£ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü:');
    
    try {
      const jobsSchema = await db.all(`PRAGMA table_info(broadcast_jobs)`);
      console.log('   ‚úÖ broadcast_jobs:', jobsSchema.map(col => col.name).join(', '));
    } catch (e) {
      console.log('   ‚ùå broadcast_jobs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    try {
      const recipientsSchema = await db.all(`PRAGMA table_info(broadcast_recipients)`);
      console.log('   ‚úÖ broadcast_recipients:', recipientsSchema.map(col => col.name).join(', '));
    } catch (e) {
      console.log('   ‚ùå broadcast_recipients –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    console.log('');

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
    console.log('5Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:');
    const errors = await db.all(`
      SELECT job_id, telegram_id, error, created_at
      FROM broadcast_recipients 
      WHERE status = 'failed' 
      ORDER BY created_at DESC 
      LIMIT 5
    `);
    
    if (errors.length === 0) {
      console.log('   ‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫');
    } else {
      console.log(`   ‚ùå –ù–∞–π–¥–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫:`);
      errors.forEach(err => {
        console.log(`      - Job ID: ${err.job_id}, Telegram ID: ${err.telegram_id}, –û—à–∏–±–∫–∞: ${err.error}`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

async function main() {
  try {
    await checkDatabase();
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('\nüí• –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { checkDatabase };
