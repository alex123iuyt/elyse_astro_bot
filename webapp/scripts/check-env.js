#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * –ó–∞–ø—É—Å–∫: node scripts/check-env.js
 */

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const requiredVars = [
  'BOT_TOKEN',
  'NODE_ENV',
  'BASE_URL'
];

const optionalVars = [
  'DATABASE_URL',
  'JWT_SECRET',
  'ADMIN_EMAIL'
];

console.log('üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
requiredVars.forEach(varName => {
  const value = process.env[varName];
  if (value) {
    // –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (varName === 'BOT_TOKEN') {
      const masked = value.length > 8 ? 
        value.substring(0, 4) + '...' + value.substring(value.length - 4) : 
        '***';
      console.log(`   ‚úÖ ${varName}: ${masked}`);
    } else {
      console.log(`   ‚úÖ ${varName}: ${value}`);
    }
  } else {
    console.log(`   ‚ùå ${varName}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê`);
  }
});

console.log('\nüìã –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
optionalVars.forEach(varName => {
  const value = process.env[varName];
  if (value) {
    console.log(`   ‚úÖ ${varName}: ${value}`);
  } else {
    console.log(`   ‚ö†Ô∏è  ${varName}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)`);
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º BOT_TOKEN –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
console.log('\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN:');
const botToken = process.env.BOT_TOKEN;
if (botToken) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
  if (botToken.match(/^\d+:[A-Za-z0-9_-]+$/)) {
    console.log('   ‚úÖ –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±–æ—Ç–∞
    const botId = botToken.split(':')[0];
    console.log(`   üì± ID –±–æ—Ç–∞: ${botId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
    console.log('   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Telegram API...');
    fetch(`https://api.telegram.org/bot${botToken}/getMe`)
      .then(response => response.json())
      .then(data => {
        if (data.ok) {
          console.log('   ‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
          console.log(`   üì± –ò–º—è –±–æ—Ç–∞: ${data.result.first_name}`);
          console.log(`   üÜî Username: @${data.result.username}`);
        } else {
          console.log(`   ‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: ${data.description}`);
        }
      })
      .catch(error => {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
      });
  } else {
    console.log('   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞');
    console.log('   üí° –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz');
  }
} else {
  console.log('   ‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('   üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª: BOT_TOKEN=your_token_here');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º NODE_ENV
console.log('\nüåç –ü—Ä–æ–≤–µ—Ä–∫–∞ NODE_ENV:');
const nodeEnv = process.env.NODE_ENV;
if (nodeEnv) {
  console.log(`   ‚úÖ NODE_ENV: ${nodeEnv}`);
  if (nodeEnv === 'production') {
    console.log('   ‚ö†Ô∏è  –†–µ–∂–∏–º production - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  } else if (nodeEnv === 'development') {
    console.log('   ‚úÖ –†–µ–∂–∏–º development - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  }
} else {
  console.log('   ‚ö†Ô∏è  NODE_ENV –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º BASE_URL
console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ BASE_URL:');
const baseUrl = process.env.BASE_URL;
if (baseUrl) {
  console.log(`   ‚úÖ BASE_URL: ${baseUrl}`);
  try {
    const url = new URL(baseUrl);
    console.log(`   ‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª: ${url.protocol}`);
    console.log(`   ‚úÖ –•–æ—Å—Ç: ${url.host}`);
    console.log(`   ‚úÖ –ü–æ—Ä—Ç: ${url.port || '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}`);
  } catch (error) {
    console.log(`   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL: ${error.message}`);
  }
} else {
  console.log('   ‚ö†Ô∏è  BASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω http://localhost:3000');
}

console.log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
if (!process.env.BOT_TOKEN) {
  console.log('   üî¥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏');
}
if (!process.env.NODE_ENV) {
  console.log('   üü° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ NODE_ENV=development –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
}
if (!process.env.BASE_URL) {
  console.log('   üü° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BASE_URL –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤');
}

console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');






