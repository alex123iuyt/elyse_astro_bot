#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API endpoints –Ω–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ Today
 * –ó–∞–ø—É—Å–∫: node scripts/test-api.js
 */

const BASE_URL = 'http://localhost:3000';
const TODAY = new Date().toISOString().split('T')[0];

const endpoints = [
  {
    name: 'Stories API',
    url: `/api/content/stories?date=${TODAY}&tz=Europe/Amsterdam`,
    method: 'GET'
  },
  {
    name: 'Forecast API',
    url: `/api/content/forecast?date=${TODAY}&tz=Europe/Amsterdam`,
    method: 'GET'
  },
  {
    name: 'Lunar Calendar API',
    url: `/api/content/lunar/month?date=${TODAY}&tz=Europe/Amsterdam`,
    method: 'GET'
  },
  {
    name: 'Banner API',
    url: `/api/content/banner?type=CHAT_ASTROLOGER&tz=Europe/Amsterdam`,
    method: 'GET'
  }
];

async function testEndpoint(endpoint) {
  try {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é ${endpoint.name}...`);
    console.log(`   URL: ${BASE_URL}${endpoint.url}`);
    
    const response = await fetch(`${BASE_URL}${endpoint.url}`, {
      method: endpoint.method,
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status}`);
      console.log(`   üìä –£—Å–ø–µ—Ö: ${data.success}`);
      console.log(`   üìà –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.meta?.source || 'N/A'}`);
      console.log(`   üìÖ –î–∞—Ç–∞: ${data.meta?.date || 'N/A'}`);
      
      if (data.data) {
        if (Array.isArray(data.data)) {
          console.log(`   üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${data.data.length}`);
        } else {
          console.log(`   üìù ID: ${data.data.id || 'N/A'}`);
          console.log(`   üìù –¢–∏–ø: ${data.data.type || 'N/A'}`);
        }
      }
    } else {
      console.log(`   ‚ùå –°—Ç–∞—Ç—É—Å: ${response.status}`);
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${response.statusText}`);
    }
  } catch (error) {
    console.log(`   üí• –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API –¥–ª—è —ç–∫—Ä–∞–Ω–∞ Today');
  console.log(`üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${TODAY}`);
  console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}`);
  
  for (const endpoint of endpoints) {
    await testEndpoint(endpoint);
  }
  
  console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ API –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã');
  console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ fallback –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
  console.log('3. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/today –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –≤ Node.js
if (typeof window === 'undefined') {
  runTests().catch(console.error);
} else {
  console.log('–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –≤ Node.js, –∞ –Ω–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
}





