#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
 * –ó–∞–ø—É—Å–∫: node scripts/check-bot-users.js
 */

import { promises as fs } from 'fs';
import path from 'path';

const BOT_USERS_FILE = path.join(process.cwd(), 'data', 'bot-users.json');

async function checkBotUsers() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    try {
      await fs.access(BOT_USERS_FILE);
      console.log('‚úÖ –§–∞–π–ª bot-users.json –Ω–∞–π–¥–µ–Ω');
    } catch (error) {
      console.log('‚ùå –§–∞–π–ª bot-users.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
      console.log('   –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª...');
      
      const emptyData = { users: [] };
      await fs.writeFile(BOT_USERS_FILE, JSON.stringify(emptyData, null, 2));
      console.log('   ‚úÖ –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω');
      return;
    }

    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const data = await fs.readFile(BOT_USERS_FILE, 'utf-8');
    const parsed = JSON.parse(data);
    const users = parsed.users || [];

    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

    if (users.length === 0) {
      console.log('   ‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞');
      console.log('   üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ /start –±–æ—Ç—É');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    const recentUsers = users.slice(-10).reverse();
    
    recentUsers.forEach((user, index) => {
      console.log(`   ${index + 1}. ID: ${user.id}`);
      console.log(`      Telegram ID: ${user.telegram_id}`);
      console.log(`      –ò–º—è: ${user.name}`);
      console.log(`      Username: ${user.username || '‚Äî'}`);
      console.log(`      –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: ${user.zodiac_sign || '‚Äî'}`);
      console.log(`      Premium: ${user.is_premium ? '‚úÖ' : '‚ùå'}`);
      console.log(`      –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${new Date(user.last_active).toLocaleString('ru-RU')}`);
      console.log(`      –°–æ–æ–±—â–µ–Ω–∏–π: ${user.message_count}`);
      console.log('');
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const premiumUsers = users.filter(u => u.is_premium).length;
    const activeUsers = users.filter(u => {
      const lastActive = new Date(u.last_active);
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);
      return lastActive > weekAgo;
    }).length;

    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${premiumUsers}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${activeUsers}`);
    console.log(`   –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${users.length - activeUsers}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    console.log('\nüì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
    const allUsers = users.length;
    const premiumForBroadcast = users.filter(u => u.is_premium).length;
    const inactiveForBroadcast = users.filter(u => {
      const lastActive = new Date(u.last_active);
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);
      return lastActive < weekAgo;
    }).length;

    console.log(`   –í—Å–µ–≥–æ: ${allUsers}`);
    console.log(`   Premium: ${premiumForBroadcast}`);
    console.log(`   –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (7+ –¥–Ω–µ–π): ${inactiveForBroadcast}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkBotUsers().then(() => {
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});






