const sqlite3 = require('sqlite3');
const { open } = require('sqlite');
const bcrypt = require('bcryptjs');
const path = require('path');

async function createAdminUser() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ SQLite –±–∞–∑–µ...');

    const dbPath = path.join(process.cwd(), 'webapp', 'data', 'elyse.db');
    console.log(`üìÅ –ü—É—Ç—å –∫ –±–∞–∑–µ: ${dbPath}`);

    const db = await open({
      filename: dbPath,
      driver: sqlite3.Database
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users
    const tableExists = await db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='users'");
    if (!tableExists) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã...');
      await initializeDatabase(db);
    }

    const email = 'admin@elyse.local';
    const password = 'admin123';
    const name = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = await db.get('SELECT * FROM users WHERE email = ?', [email]);

    if (existingUser) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      console.log(`üìä ID: ${existingUser.id}`);
      console.log(`üë§ –†–æ–ª—å: ${existingUser.role}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ admin –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (existingUser.role !== 'admin') {
        await db.run('UPDATE users SET role = ? WHERE id = ?', ['admin', existingUser.id]);
        console.log('‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ admin');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      const hashedPassword = await bcrypt.hash(password, 12);
      await db.run('UPDATE users SET password_hash = ? WHERE id = ?', [hashedPassword, existingUser.id]);
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
      
      return;
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 12);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await db.run(`
      INSERT INTO users (
        email, password_hash, name, birth_date, birth_city, 
        birth_country, timezone, zodiac_sign, role, is_premium
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
      email,
      hashedPassword,
      name,
      '1990-01-01',
      '–ú–æ—Å–∫–≤–∞',
      'RU',
      'Europe/Moscow',
      '–ö–æ–∑–µ—Ä–æ–≥',
      'admin',
      1
    ]);

    console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä ID: ${result.lastID}`);
    console.log(`üìß Email: ${email}`);
    console.log(`üë§ –ò–º—è: ${name}`);
    console.log(`üîë –†–æ–ª—å: admin`);
    console.log(`üîê –ü–∞—Ä–æ–ª—å: ${password}`);
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É:');
    console.log(`   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/auth`);
    console.log(`   2. –í–≤–µ–¥–∏—Ç–µ email: ${email}`);
    console.log(`   3. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ${password}`);
    console.log(`   4. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ http://localhost:3000/admin`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    throw error;
  }
}

async function initializeDatabase(db) {
  console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  // Users table
  await db.exec(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      telegram_id TEXT UNIQUE,
      email TEXT UNIQUE,
      password_hash TEXT,
      name TEXT NOT NULL,
      birth_date DATE NOT NULL,
      birth_time TIME,
      birth_city TEXT NOT NULL,
      birth_country TEXT DEFAULT 'RU',
      timezone TEXT DEFAULT 'Europe/Moscow',
      zodiac_sign TEXT,
      sun_sign TEXT,
      moon_sign TEXT,
      ascendant_sign TEXT,
      role TEXT DEFAULT 'user' CHECK(role IN ('user', 'manager', 'admin')),
      is_premium BOOLEAN DEFAULT 0,
      premium_until DATETIME,
      subscription_type TEXT DEFAULT 'free',
      chat_count INTEGER DEFAULT 0,
      last_active DATETIME DEFAULT CURRENT_TIMESTAMP,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // Chat sessions table
  await db.exec(`
    CREATE TABLE IF NOT EXISTS chat_sessions (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      session_token TEXT UNIQUE NOT NULL,
      is_active BOOLEAN DEFAULT 1,
      last_activity DATETIME DEFAULT CURRENT_TIMESTAMP,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
    )
  `);

  // Messages table
  await db.exec(`
    CREATE TABLE IF NOT EXISTS messages (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      session_id INTEGER NOT NULL,
      user_id INTEGER NOT NULL,
      content TEXT NOT NULL,
      is_from_user BOOLEAN NOT NULL,
      is_ai_generated BOOLEAN DEFAULT 0,
      admin_reply_id INTEGER,
      message_type TEXT DEFAULT 'text' CHECK(message_type IN ('text', 'system', 'admin_reply')),
      status TEXT DEFAULT 'sent' CHECK(status IN ('sent', 'delivered', 'read', 'pending')),
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (session_id) REFERENCES chat_sessions (id) ON DELETE CASCADE,
      FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
      FOREIGN KEY (admin_reply_id) REFERENCES users (id)
    )
  `);

  // Admin notifications table
  await db.exec(`
    CREATE TABLE IF NOT EXISTS admin_notifications (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      session_id INTEGER NOT NULL,
      message_id INTEGER NOT NULL,
      is_read BOOLEAN DEFAULT 0,
      admin_id INTEGER,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      read_at DATETIME,
      FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
      FOREIGN KEY (session_id) REFERENCES chat_sessions (id) ON DELETE CASCADE,
      FOREIGN KEY (message_id) REFERENCES messages (id) ON DELETE CASCADE,
      FOREIGN KEY (admin_id) REFERENCES users (id)
    )
  `);

  console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
createAdminUser()
  .then(() => {
    console.log('\n‚ú® –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
