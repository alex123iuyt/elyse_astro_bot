#!/usr/bin/env node

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
 * –ó–∞–ø—É—Å–∫: node scripts/quick-test.js
 */

const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';

async function quickTest() {
  console.log('üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...');
    const healthCheck = await fetch(`${BASE_URL}/api/admin/stats`);
    if (healthCheck.ok) {
      console.log('   ‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      throw new Error(`API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${healthCheck.status}`);
    }

    // 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–∞—Å—Å—ã–ª–∫—É
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...');
    const createResponse = await fetch(`${BASE_URL}/api/admin/notifications`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        title: '–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç',
        text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏',
        segment: 'all'
      })
    });

    const createData = await createResponse.json();
    console.log('   üìä –û—Ç–≤–µ—Ç API:', createData);

    if (!createData.success) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${createData.error}`);
    }

    const { jobId, total } = createData;
    console.log(`   ‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: Job ID ${jobId}, –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${total}`);

    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    console.log('\n3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    const processResponse = await fetch(`${BASE_URL}/api/admin/notifications/process`, {
      method: 'POST'
    });

    const processData = await processResponse.json();
    console.log('   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:', processData);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...');
    await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã

    const processResponse2 = await fetch(`${BASE_URL}/api/admin/notifications/process`, {
      method: 'POST'
    });

    const processData2 = await processResponse2.json();
    console.log('   üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', processData2);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...');
    const historyResponse = await fetch(`${BASE_URL}/api/admin/notifications/history`);
    const historyData = await historyResponse.json();

    console.log('   üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫:', historyData);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    if (!Array.isArray(historyData)) {
      console.log('   ‚ö†Ô∏è  –ò—Å—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É...');
      if (historyData && typeof historyData === 'object' && historyData.data) {
        const currentJob = historyData.data.find(job => job.id === jobId);
        if (currentJob) {
          console.log('   üìä Job –≤ –∏—Å—Ç–æ—Ä–∏–∏:', {
            id: currentJob.id,
            title: currentJob.title,
            status: currentJob.status,
            sent: currentJob.sent,
            failed: currentJob.failed,
            total: currentJob.total
          });
        } else {
          console.log('   ‚ùå Job –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏');
        }
      } else {
        console.log('   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:', historyData);
      }
    } else {
      const currentJob = historyData.find(job => job.id === jobId);
      if (currentJob) {
        console.log('   üìä Job –≤ –∏—Å—Ç–æ—Ä–∏–∏:', {
          id: currentJob.id,
          title: currentJob.title,
          status: currentJob.status,
          sent: currentJob.sent,
          failed: currentJob.failed,
          total: currentJob.total
        });
      } else {
        console.log('   ‚ùå Job –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏');
      }
    }

    console.log('\n‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
    if (processData2.stats && processData2.stats.failed_count > 0) {
      console.log(`‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: ${processData2.stats.failed_count} –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ`);
      console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π');
    }

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  quickTest();
}

module.exports = { quickTest };
