#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
 * –ó–∞–ø—É—Å–∫: node scripts/add-test-user.js
 */

import { promises as fs } from 'fs';
import path from 'path';

const BOT_USERS_FILE = path.join(process.cwd(), 'data', 'bot-users.json');

async function addTestUser() {
  console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');

  try {
    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let users = [];
    try {
      const data = await fs.readFile(BOT_USERS_FILE, 'utf-8');
      const parsed = JSON.parse(data);
      users = parsed.users || [];
    } catch (error) {
      console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = {
      id: `tg_${Date.now()}`,
      telegram_id: '123456789', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      username: 'test_user',
      birth_date: '1990-01-01',
      birth_city: '–ú–æ—Å–∫–≤–∞',
      timezone: 'Europe/Moscow',
      zodiac_sign: '–ö–æ–∑–µ—Ä–æ–≥',
      is_premium: false,
      last_active: new Date().toISOString(),
      created_at: new Date().toISOString(),
      message_count: 0
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id
    const existingUser = users.find(u => u.telegram_id === testUser.telegram_id);
    if (existingUser) {
      console.log('‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:');
      console.log(`   ID: ${existingUser.id}`);
      console.log(`   –ò–º—è: ${existingUser.name}`);
      console.log(`   Username: ${existingUser.username || '‚Äî'}`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${new Date(existingUser.last_active).toLocaleString('ru-RU')}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      existingUser.last_active = new Date().toISOString();
      console.log('   ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      users.push(testUser);
      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:');
      console.log(`   ID: ${testUser.id}`);
      console.log(`   Telegram ID: ${testUser.telegram_id}`);
      console.log(`   –ò–º—è: ${testUser.name}`);
      console.log(`   Username: ${testUser.username}`);
      console.log(`   –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: ${testUser.zodiac_sign}`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    await fs.writeFile(BOT_USERS_FILE, JSON.stringify({ users }, null, 2));
    console.log('\nüíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    console.log(`   –í—Å–µ–≥–æ: ${users.length}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${users.filter(u => {
      const lastActive = new Date(u.last_active);
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);
      return lastActive > weekAgo;
    }).length}`);

    console.log('\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
    console.log('   1. –ó–∞–º–µ–Ω–∏—Ç–µ telegram_id –≤ —Å–∫—Ä–∏–ø—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID');
    console.log('   2. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start');
    console.log('   3. –°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
addTestUser().then(() => {
  console.log('\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});









