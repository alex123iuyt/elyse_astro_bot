#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã: cancelled, paused
 */

import sqlite3 from 'sqlite3';
import { open } from 'sqlite';
import path from 'path';

async function migrateDatabase() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    const dbPath = path.join(process.cwd(), 'data', 'elyse.db');
    console.log(`üìÅ –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
    
    const db = await open({
      filename: dbPath,
      driver: sqlite3.Database
    });

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã broadcast_jobs
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã broadcast_jobs...');
    
    try {
      const tableInfo = await db.all(`PRAGMA table_info(broadcast_jobs)`);
      console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ broadcast_jobs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      const statusColumn = tableInfo.find(col => col.name === 'status');
      if (statusColumn) {
        console.log(`   üìã –ö–æ–ª–æ–Ω–∫–∞ status: ${statusColumn.type}, default: ${statusColumn.dflt_value}`);
      }
    } catch (e) {
      console.log('   ‚ùå –¢–∞–±–ª–∏—Ü–∞ broadcast_jobs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã —Ä–∞—Å—Å—ã–ª–æ–∫...');
    
    try {
      const statuses = await db.all(`
        SELECT status, COUNT(*) as count 
        FROM broadcast_jobs 
        GROUP BY status
      `);
      
      if (statuses.length > 0) {
        console.log('   üìä –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã:');
        statuses.forEach(s => {
          console.log(`      - ${s.status}: ${s.count} —Ä–∞—Å—Å—ã–ª–æ–∫`);
        });
      } else {
        console.log('   ‚ÑπÔ∏è –ù–µ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ –±–∞–∑–µ');
      }
    } catch (e) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤:', e.message);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –±–∞–∑–∞ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤...');
    
    try {
      // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ 'cancelled'
      const testUpdate = await db.run(`
        UPDATE broadcast_jobs 
        SET status = 'cancelled' 
        WHERE id = (SELECT id FROM broadcast_jobs LIMIT 1)
      `);
      
      if (testUpdate.changes > 0) {
        console.log('   ‚úÖ –ù–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        await db.run(`
          UPDATE broadcast_jobs 
          SET status = 'queued' 
          WHERE status = 'cancelled'
        `);
      }
    } catch (e) {
      console.log('   ‚ùå –ë–∞–∑–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã:', e.message);
      console.log('   üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã');
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      console.log('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...');
      
      try {
        await db.run(`CREATE TABLE IF NOT EXISTS broadcast_jobs_backup AS SELECT * FROM broadcast_jobs`);
        console.log('   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
        await db.run(`DROP TABLE broadcast_jobs`);
        console.log('   ‚úÖ –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π
        await db.run(`
          CREATE TABLE broadcast_jobs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT,
            text TEXT NOT NULL,
            filter TEXT,
            total INTEGER DEFAULT 0,
            sent INTEGER DEFAULT 0,
            failed INTEGER DEFAULT 0,
            status TEXT DEFAULT 'queued' CHECK(status IN ('queued','running','done','failed','cancelled','paused')),
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            started_at DATETIME,
            finished_at DATETIME
          )
        `);
        console.log('   ‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await db.run(`
          INSERT INTO broadcast_jobs 
          SELECT id, title, text, filter, total, sent, failed, status, created_at, started_at, finished_at 
          FROM broadcast_jobs_backup
        `);
        console.log('   ‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        
        // –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        await db.run(`DROP TABLE broadcast_jobs_backup`);
        console.log('   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞');
        
      } catch (backupError) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', backupError.message);
        return;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
    
    try {
      const finalStatuses = await db.all(`
        SELECT status, COUNT(*) as count 
        FROM broadcast_jobs 
        GROUP BY status
      `);
      
      if (finalStatuses.length > 0) {
        console.log('   üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:');
        finalStatuses.forEach(s => {
          console.log(`      - ${s.status}: ${s.count} —Ä–∞—Å—Å—ã–ª–æ–∫`);
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É
      const finalTableInfo = await db.all(`PRAGMA table_info(broadcast_jobs)`);
      const finalStatusColumn = finalTableInfo.find(col => col.name === 'status');
      if (finalStatusColumn) {
        console.log(`   üìã –ö–æ–ª–æ–Ω–∫–∞ status: ${finalStatusColumn.type}, default: ${finalStatusColumn.dflt_value}`);
      }
      
    } catch (e) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', e.message);
    }

    console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìù –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
    console.log('   - üö´ –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ (—Å—Ç–∞—Ç—É—Å: cancelled)');
    console.log('   - ‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ (—Å—Ç–∞—Ç—É—Å: paused)');
    console.log('   - üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫');
    console.log('   - üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫');
    console.log('   - üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—Å—ã–ª–æ–∫');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateDatabase().catch(console.error);









