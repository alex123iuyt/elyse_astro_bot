"use client";
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '../../contexts/AuthContext';

type Step = 'login' | 'register' | 'natal-chart' | 'goals';

function toast(message: string, type: 'success'|'error'|'info' = 'info') {
  if (typeof window !== 'undefined') {
    window.dispatchEvent(new CustomEvent('app:toast', { detail: { message, type } }));
  }
}

export default function AuthPage() {
  const router = useRouter();
  const { login, user, isAuthenticated, isLoading: authLoading } = useAuth();
  const [step, setStep] = useState<'login' | 'register' | 'natal-chart' | 'goals'>('login');
  const [isLoading, setIsLoading] = useState(false);

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
  useEffect(() => {
    console.log('üîÑ Auth page effect:', { authLoading, isAuthenticated, user: user?.email, role: user?.role });
    
    if (!authLoading && isAuthenticated && user) {
      // –ü–æ–ª—É—á–∞–µ–º callback URL –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const urlParams = new URLSearchParams(window.location.search);
      const callbackUrl = urlParams.get('callbackUrl');
      
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      const currentPath = window.location.pathname;
      if (currentPath === '/auth') {
        console.log('üöÄ Redirecting authenticated user:', user.role);
        if (user.role === 'admin') {
          // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–¥–º–∏–Ω–∫—É –∏–ª–∏ callback URL
          if (callbackUrl && callbackUrl.startsWith('/admin')) {
            router.replace(callbackUrl);
          } else {
            router.replace('/admin');
          }
        } else {
          // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏–ª–∏ callback URL
          if (callbackUrl && !callbackUrl.startsWith('/admin')) {
            router.replace(callbackUrl);
          } else {
            router.replace('/');
          }
        }
      }
    }
  }, [authLoading, isAuthenticated, user, router]);
  
  // Login state
  const [loginEmail, setLoginEmail] = useState('');
  const [loginPassword, setLoginPassword] = useState('');
  const [rememberMe, setRememberMe] = useState(false);
  
  // Register state
  const [registerEmail, setRegisterEmail] = useState('');
  const [registerPassword, setRegisterPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  
  // Natal chart state
  const [birthDate, setBirthDate] = useState('');
  const [birthTime, setBirthTime] = useState('');
  const [birthCity, setBirthCity] = useState('');
  const [birthCountry, setBirthCountry] = useState('–†–æ—Å—Å–∏—è');
  
  // Goals state
  const [goals, setGoals] = useState<string[]>([]);
  const [customGoal, setCustomGoal] = useState('');

  useEffect(() => {
    // –ü—Ä–µ—Ñ–∏–ª–ª email, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ó–∞–ø–æ–º–Ω–∏ –º–µ–Ω—è"
    const saved = localStorage.getItem('elyse.savedEmail');
    if (saved) {
      setLoginEmail(saved);
      setRememberMe(true);
    }
  }, []);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  if (authLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white flex items-center justify-center p-4">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-white border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</p>
        </div>
      </div>
    );
  }

  const availableGoals = [
    '–õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
    '–ö–∞—Ä—å–µ—Ä–∞ –∏ –±–∏–∑–Ω–µ—Å',
    '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ',
    '–î—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
    '–§–∏–Ω–∞–Ω—Å—ã –∏ –±–æ–≥–∞—Ç—Å—Ç–≤–æ',
    '–°–µ–º—å—è –∏ –¥–µ—Ç–∏',
    '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
    '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –∑–Ω–∞–Ω–∏—è'
  ];

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: loginEmail, password: loginPassword, rememberMe })
      });
      
      const data = await response.json();
      
      if (data.success) {
        if (rememberMe) {
          localStorage.setItem('elyse.savedEmail', loginEmail);
        } else {
          localStorage.removeItem('elyse.savedEmail');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        login(data.user);
        
        toast('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'success');
        
        // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if (data.user.role === 'admin') {
          // –ü–æ–ª—É—á–∞–µ–º callback URL –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          const urlParams = new URLSearchParams(window.location.search);
          const callbackUrl = urlParams.get('callbackUrl');
          
          if (callbackUrl && callbackUrl.startsWith('/admin')) {
            router.replace(callbackUrl);
          } else {
            router.replace('/admin');
          }
        } else {
          router.replace('/');
        }
        return;
      } else {
        toast(data.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', 'error');
      }
    } catch (error) {
      toast('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (registerPassword !== confirmPassword) {
      toast('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
      return;
    }
    
    setStep('natal-chart');
  };

  const handleNatalChart = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!birthDate || !birthTime || !birthCity) {
      toast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã', 'error');
      return;
    }
    
    setStep('goals');
  };

  const handleGoals = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (goals.length === 0) {
      toast('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–ª—å', 'error');
      return;
    }
    
    setIsLoading(true);
    
    try {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: registerEmail,
          password: registerPassword,
          birthDate,
          birthTime,
          birthCity,
          birthCountry,
          goals: goals.join(', '),
          customGoal: customGoal || undefined
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        toast('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Elyse Astro!', 'success');
        // –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        router.push('/');
        return;
      } else {
        toast(data.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'error');
      }
    } catch (error) {
      toast('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  const toggleGoal = (goal: string) => {
    setGoals(prev => 
      prev.includes(goal) 
        ? prev.filter(g => g !== goal)
        : [...prev, goal]
    );
  };

  const addCustomGoal = () => {
    if (customGoal.trim() && !goals.includes(customGoal.trim())) {
      setGoals(prev => [...prev, customGoal.trim()]);
      setCustomGoal('');
    }
  };

  const removeGoal = (goal: string) => {
    setGoals(prev => prev.filter(g => g !== goal));
  };

  if (step === 'natal-chart') {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center p-4">
        <div className="w-full max-w-md">
          <div className="text-center mb-8">
            <h1 className="text-2xl font-bold mb-2">–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</h1>
            <p className="text-zinc-400">–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º —Ä–æ–∂–¥–µ–Ω–∏–∏</p>
          </div>
          
          <form onSubmit={handleNatalChart} className="space-y-4">
            <div>
              <label className="block text-sm text-zinc-400 mb-2">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</label>
              <input
                type="date"
                value={birthDate}
                onChange={(e) => setBirthDate(e.target.value)}
                className="w-full bg-zinc-900 border border-zinc-700 rounded-xl p-3 text-white focus:border-emerald-500 focus:outline-none"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm text-zinc-400 mb-2">–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è</label>
              <input
                type="time"
                value={birthTime}
                onChange={(e) => setBirthTime(e.target.value)}
                className="w-full bg-zinc-900 border border-zinc-700 rounded-xl p-3 text-white focus:border-emerald-500 focus:outline-none"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm text-zinc-400 mb-2">–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è</label>
              <input
                type="text"
                value={birthCity}
                onChange={(e) => setBirthCity(e.target.value)}
                placeholder="–ú–æ—Å–∫–≤–∞"
                className="w-full bg-zinc-900 border border-zinc-700 rounded-xl p-3 text-white focus:border-emerald-500 focus:outline-none"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm text-zinc-400 mb-2">–°—Ç—Ä–∞–Ω–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</label>
              <select
                value={birthCountry}
                onChange={(e) => setBirthCountry(e.target.value)}
                className="w-full bg-zinc-900 border border-zinc-700 rounded-xl p-3 text-white focus:border-emerald-500 focus:outline-none"
              >
                <option value="–†–æ—Å—Å–∏—è">–†–æ—Å—Å–∏—è</option>
                <option value="–£–∫—Ä–∞–∏–Ω–∞">–£–∫—Ä–∞–∏–Ω–∞</option>
                <option value="–ë–µ–ª–∞—Ä—É—Å—å">–ë–µ–ª–∞—Ä—É—Å—å</option>
                <option value="–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω">–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω</option>
                <option value="–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω">–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω</option>
                <option value="–î—Ä—É–≥–æ–µ">–î—Ä—É–≥–æ–µ</option>
              </select>
            </div>
            
            <div className="flex space-x-3 pt-4">
              <button
                type="button"
                onClick={() => setStep('register')}
                className="flex-1 bg-zinc-700 hover:bg-zinc-600 text-white py-3 rounded-xl transition-colors"
              >
                –ù–∞–∑–∞–¥
              </button>
              <button
                type="submit"
                className="flex-1 bg-emerald-600 hover:bg-emerald-700 text-white py-3 rounded-xl transition-colors"
              >
                –î–∞–ª–µ–µ
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  }

  if (step === 'goals') {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center p-4">
        <div className="w-full max-w-md">
          <div className="text-center mb-8">
            <h1 className="text-2xl font-bold mb-2">–í–∞—à–∏ —Ü–µ–ª–∏</h1>
            <p className="text-zinc-400">–ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ –≤ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏?</p>
          </div>
          
          <form onSubmit={handleGoals} className="space-y-6">
            <div>
              <label className="block text-sm text-zinc-400 mb-3">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–∏:</label>
              <div className="grid grid-cols-2 gap-2">
                {availableGoals.map(goal => (
                  <button
                    key={goal}
                    type="button"
                    onClick={() => toggleGoal(goal)}
                    className={`p-3 rounded-lg text-sm transition-colors ${
                      goals.includes(goal)
                        ? 'bg-emerald-600 text-white'
                        : 'bg-zinc-800 text-zinc-300 hover:bg-zinc-700'
                    }`}
                  >
                    {goal}
                  </button>
                ))}
              </div>
            </div>
            
            <div>
              <label className="block text-sm text-zinc-400 mb-2">–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Ü–µ–ª—å:</label>
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={customGoal}
                  onChange={(e) => setCustomGoal(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å"
                  className="flex-1 bg-zinc-900 border border-zinc-700 rounded-lg p-3 text-white focus:border-emerald-500 focus:outline-none"
                />
                <button
                  type="button"
                  onClick={addCustomGoal}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-3 rounded-lg transition-colors"
                >
                  +
                </button>
              </div>
            </div>
            
            {goals.length > 0 && (
              <div>
                <label className="block text-sm text-zinc-400 mb-2">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏:</label>
                <div className="flex flex-wrap gap-2">
                  {goals.map(goal => (
                    <span
                      key={goal}
                      className="bg-emerald-600 text-white px-3 py-1 rounded-full text-sm flex items-center space-x-2"
                    >
                      <span>{goal}</span>
                      <button
                        type="button"
                        onClick={() => removeGoal(goal)}
                        className="text-emerald-200 hover:text-white"
                      >
                        √ó
                      </button>
                    </span>
                  ))}
                </div>
              </div>
            )}
            
            <div className="flex space-x-3 pt-4">
              <button
                type="button"
                onClick={() => setStep('natal-chart')}
                className="flex-1 bg-zinc-700 hover:bg-zinc-600 text-white py-3 rounded-xl transition-colors"
              >
                –ù–∞–∑–∞–¥
              </button>
              <button
                type="submit"
                disabled={isLoading || goals.length === 0}
                className="flex-1 bg-emerald-600 hover:bg-emerald-700 disabled:bg-zinc-700 text-white py-3 rounded-xl transition-colors"
              >
                {isLoading ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'}
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        <div className="text-center mb-8">
          <h1 className="text-2xl font-bold mb-2">Elyse Astro</h1>
          <p className="text-zinc-400">–í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å</p>
        </div>
        
        <div className="flex bg-zinc-800 rounded-xl p-1 mb-6">
          <button
            onClick={() => setStep('login')}
            className={`flex-1 py-3 px-4 rounded-lg font-medium transition-all ${
              step === 'login'
                ? 'bg-emerald-600 text-white'
                : 'text-zinc-400 hover:text-white'
            }`}
          >
            –í—Ö–æ–¥
          </button>
          <button
            onClick={() => setStep('register')}
            className={`flex-1 py-3 px-4 rounded-lg font-medium transition-all ${
              step === 'register'
                ? 'bg-emerald-600 text-white'
                : 'text-zinc-400 hover:text-white'
            }`}
          >
            –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
          </button>
        </div>
        
        {step === 'login' ? (
          <form onSubmit={handleLogin} className="space-y-4" autoComplete="on">
            <div>
              <label className="block text-sm text-zinc-400 mb-2">Email</label>
              <input
                type="email"
                value={loginEmail}
                onChange={(e) => setLoginEmail(e.target.value)}
                name="username"
                autoComplete="username email"
                inputMode="email"
                className="w-full bg-zinc-900 border border-zinc-700 rounded-xl p-3 text-white focus:border-emerald-500 focus:outline-none"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm text-zinc-400 mb-2">–ü–∞—Ä–æ–ª—å</label>
              <input
                type="password"
                value={loginPassword}
                onChange={(e) => setLoginPassword(e.target.value)}
                name="current-password"
                autoComplete="current-password"
                className="w-full bg-zinc-900 border border-zinc-700 rounded-xl p-3 text-white focus:border-emerald-500 focus:outline-none"
                required
              />
            </div>
            
            <div className="flex items-center space-x-2">
              <input
                type="checkbox"
                id="rememberMe"
                checked={rememberMe}
                onChange={(e) => setRememberMe(e.target.checked)}
                className="w-4 h-4 text-emerald-600 bg-zinc-900 border-zinc-700 rounded focus:ring-emerald-500 focus:ring-2"
              />
              <label htmlFor="rememberMe" className="text-sm text-zinc-400">
                –ó–∞–ø–æ–º–Ω–∏ –º–µ–Ω—è
              </label>
            </div>
            
            <button
              type="submit"
              disabled={isLoading}
              className="w-full bg-emerald-600 hover:bg-emerald-700 disabled:bg-zinc-700 text-white py-3 rounded-xl transition-colors"
            >
              {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
            </button>
          </form>
        ) : (
          <form onSubmit={handleRegister} className="space-y-4" autoComplete="on">
            <div>
              <label className="block text-sm text-zinc-400 mb-2">Email</label>
              <input
                type="email"
                value={registerEmail}
                onChange={(e) => setRegisterEmail(e.target.value)}
                name="email"
                autoComplete="email"
                inputMode="email"
                className="w-full bg-zinc-900 border border-zinc-700 rounded-xl p-3 text-white focus:border-emerald-500 focus:outline-none"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm text-zinc-400 mb-2">–ü–∞—Ä–æ–ª—å</label>
              <input
                type="password"
                value={registerPassword}
                onChange={(e) => setRegisterPassword(e.target.value)}
                name="new-password"
                autoComplete="new-password"
                className="w-full bg-zinc-900 border border-zinc-700 rounded-xl p-3 text-white focus:border-emerald-500 focus:outline-none"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm text-zinc-400 mb-2">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
              <input
                type="password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                name="confirm-password"
                autoComplete="new-password"
                className="w-full bg-zinc-900 border border-zinc-700 rounded-xl p-3 text-white focus:border-emerald-500 focus:outline-none"
                required
              />
            </div>
            
            <button
              type="submit"
              className="w-full bg-emerald-600 hover:bg-emerald-700 text-white py-3 rounded-xl transition-colors"
            >
              –î–∞–ª–µ–µ - –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
            </button>
          </form>
        )}
      </div>
    </div>
  );
}