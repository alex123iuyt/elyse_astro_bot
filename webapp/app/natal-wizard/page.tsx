'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { ls } from '../../lib/storage';
import { motion, AnimatePresence } from 'framer-motion';

interface NatalChartData {
  name: string;
  birthDate: string;
  birthTime: string;
  birthCity: string;
  birthCountry: string;
  gender: string;
  relationshipStatus: string;
  occupation: string;
  interests: string[];
}

const steps = [
  {
    id: 1,
    title: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    description: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ',
    icon: 'üë§',
    color: 'from-blue-500/20 to-cyan-500/20'
  },
  {
    id: 2,
    title: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è',
    description: '–¢–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞',
    icon: 'üìÖ',
    color: 'from-green-500/20 to-emerald-500/20'
  },
  {
    id: 3,
    title: '–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è',
    description: '–ì–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω–∞',
    icon: 'üåç',
    color: 'from-purple-500/20 to-pink-500/20'
  },
  {
    id: 4,
    title: '–õ–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏',
    description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    icon: 'üí´',
    color: 'from-orange-500/20 to-red-500/20'
  },
  {
    id: 5,
    title: '–ò–Ω—Ç–µ—Ä–µ—Å—ã',
    description: '–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
    icon: '‚≠ê',
    color: 'from-yellow-500/20 to-amber-500/20'
  }
];

const interests = [
  '–õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–ö–∞—Ä—å–µ—Ä–∞', '–ó–¥–æ—Ä–æ–≤—å–µ', '–§–∏–Ω–∞–Ω—Å—ã',
  '–°–µ–º—å—è', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
  '–°–ø–æ—Ä—Ç', '–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ü—Ä–∏—Ä–æ–¥–∞'
];

export default function NatalWizardPage() {
  const router = useRouter();
  const [currentStep, setCurrentStep] = useState(1);
  const [data, setData] = useState<NatalChartData>({
    name: '',
    birthDate: '',
    birthTime: '',
    birthCity: '',
    birthCountry: '',
    gender: '',
    relationshipStatus: '',
    occupation: '',
    interests: []
  });

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const saved = ls.get('elyse.natalChart', null);
    if (saved) {
      setData(saved);
    }
  }, []);

  const updateData = (field: keyof NatalChartData, value: any) => {
    const newData = { ...data, [field]: value };
    setData(newData);
    ls.set('elyse.natalChart', newData);
  };

  const nextStep = () => {
    if (currentStep < steps.length) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleComplete = () => {
    ls.set('elyse.natalChart', data);
    // –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
    router.push('/');
  };

  const toggleInterest = (interest: string) => {
    const newInterests = data.interests.includes(interest)
      ? data.interests.filter(i => i !== interest)
      : [...data.interests, interest];
    updateData('interests', newInterests);
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <h3 className="text-2xl font-bold mb-2">–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</h3>
              <p className="text-zinc-400">–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞</p>
            </div>
            <input
              type="text"
              placeholder="–í–∞—à–µ –∏–º—è"
              value={data.name}
              onChange={(e) => updateData('name', e.target.value)}
              className="w-full p-4 bg-zinc-800 border border-zinc-700 rounded-xl text-white placeholder-zinc-400 focus:border-emerald-500 focus:outline-none transition-colors"
            />
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <h3 className="text-2xl font-bold mb-2">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è</h3>
              <p className="text-zinc-400">–¢–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã</p>
            </div>
            <div className="space-y-4">
              <input
                type="date"
                value={data.birthDate}
                onChange={(e) => updateData('birthDate', e.target.value)}
                className="w-full p-4 bg-zinc-800 border border-zinc-700 rounded-xl text-white focus:border-emerald-500 focus:outline-none transition-colors"
              />
              <input
                type="time"
                value={data.birthTime}
                onChange={(e) => updateData('birthTime', e.target.value)}
                className="w-full p-4 bg-zinc-800 border border-zinc-700 rounded-xl text-white focus:border-emerald-500 focus:outline-none transition-colors"
              />
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <h3 className="text-2xl font-bold mb-2">–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è</h3>
              <p className="text-zinc-400">–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞</p>
            </div>
            <div className="space-y-4">
              <input
                type="text"
                placeholder="–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è"
                value={data.birthCity}
                onChange={(e) => updateData('birthCity', e.target.value)}
                className="w-full p-4 bg-zinc-800 border border-zinc-700 rounded-xl text-white placeholder-zinc-400 focus:border-emerald-500 focus:outline-none transition-colors"
              />
              <input
                type="text"
                placeholder="–°—Ç—Ä–∞–Ω–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
                value={data.birthCountry}
                onChange={(e) => updateData('birthCountry', e.target.value)}
                className="w-full p-4 bg-zinc-800 border border-zinc-700 rounded-xl text-white placeholder-zinc-400 focus:border-emerald-500 focus:outline-none transition-colors"
              />
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <h3 className="text-2xl font-bold mb-2">–õ–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏</h3>
              <p className="text-zinc-400">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏</p>
            </div>
            <div className="space-y-4">
              <select
                value={data.gender}
                onChange={(e) => updateData('gender', e.target.value)}
                className="w-full p-4 bg-zinc-800 border border-zinc-700 rounded-xl text-white focus:border-emerald-500 focus:outline-none transition-colors"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª</option>
                <option value="male">–ú—É–∂—Å–∫–æ–π</option>
                <option value="female">–ñ–µ–Ω—Å–∫–∏–π</option>
                <option value="other">–î—Ä—É–≥–æ–π</option>
              </select>
              
              <select
                value={data.relationshipStatus}
                onChange={(e) => updateData('relationshipStatus', e.target.value)}
                className="w-full p-4 bg-zinc-800 border border-zinc-700 rounded-xl text-white focus:border-emerald-500 focus:outline-none transition-colors"
              >
                <option value="">–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ</option>
                <option value="single">–•–æ–ª–æ—Å—Ç/–ù–µ –∑–∞–º—É–∂–µ–º</option>
                <option value="relationship">–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö</option>
                <option value="married">–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º</option>
                <option value="complicated">–°–ª–æ–∂–Ω–æ</option>
              </select>
              
              <input
                type="text"
                placeholder="–ü—Ä–æ—Ñ–µ—Å—Å–∏—è"
                value={data.occupation}
                onChange={(e) => updateData('occupation', e.target.value)}
                className="w-full p-4 bg-zinc-800 border border-zinc-700 rounded-xl text-white placeholder-zinc-400 focus:border-emerald-500 focus:outline-none transition-colors"
              />
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <h3 className="text-2xl font-bold mb-2">–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã</h3>
              <p className="text-zinc-400">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ</p>
            </div>
            <div className="grid grid-cols-2 gap-3">
              {interests.map((interest) => (
                <button
                  key={interest}
                  onClick={() => toggleInterest(interest)}
                  className={`p-3 rounded-xl border transition-all ${
                    data.interests.includes(interest)
                      ? 'bg-emerald-500/20 border-emerald-500 text-emerald-300'
                      : 'bg-zinc-800 border-zinc-700 text-zinc-300 hover:border-zinc-600'
                  }`}
                >
                  {interest}
                </button>
              ))}
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="p-4 border-b border-zinc-800">
        <div className="flex items-center justify-between">
          <button 
            onClick={() => router.back()}
            className="w-8 h-8 bg-zinc-800 rounded-full flex items-center justify-center"
          >
            ‚Üê
          </button>
          <h1 className="text-xl font-semibold">–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</h1>
          <div className="w-8" />
        </div>
      </div>

      {/* Progress Bar */}
      <div className="p-4">
        <div className="flex items-center justify-between mb-2">
          <span className="text-sm text-zinc-400">–®–∞–≥ {currentStep} –∏–∑ {steps.length}</span>
          <span className="text-sm text-emerald-400">{Math.round((currentStep / steps.length) * 100)}%</span>
        </div>
        <div className="w-full bg-zinc-800 rounded-full h-2">
          <motion.div
            className="bg-emerald-500 h-2 rounded-full"
            initial={{ width: 0 }}
            animate={{ width: `${(currentStep / steps.length) * 100}%` }}
            transition={{ duration: 0.3 }}
          />
        </div>
      </div>

      {/* Step Header */}
      <div className="px-4">
        <div className={`h-32 bg-gradient-to-br ${steps[currentStep - 1].color} rounded-2xl relative overflow-hidden`}>
          <div className="absolute inset-0 bg-black/20" />
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="text-5xl">{steps[currentStep - 1].icon}</div>
          </div>
        </div>
        
        <div className="text-center mt-6 mb-8">
          <h2 className="text-2xl font-bold mb-2">{steps[currentStep - 1].title}</h2>
          <p className="text-zinc-400">{steps[currentStep - 1].description}</p>
        </div>
      </div>

      {/* Step Content */}
      <div className="px-4 pb-6">
        <AnimatePresence mode="wait">
          <motion.div
            key={currentStep}
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.3 }}
          >
            {renderStepContent()}
          </motion.div>
        </AnimatePresence>
      </div>

      {/* Navigation */}
      <div className="px-4 pb-6 flex space-x-3">
        {currentStep > 1 && (
          <button
            onClick={prevStep}
            className="flex-1 py-3 px-4 bg-zinc-800 text-white rounded-xl hover:bg-zinc-700 transition-colors"
          >
            –ù–∞–∑–∞–¥
          </button>
        )}
        
        {currentStep < steps.length ? (
          <button
            onClick={nextStep}
            className="flex-1 py-3 px-4 bg-emerald-600 text-white rounded-xl hover:bg-emerald-700 transition-colors"
          >
            –î–∞–ª–µ–µ
          </button>
        ) : (
          <button
            onClick={handleComplete}
            className="flex-1 py-3 px-4 bg-emerald-600 text-white rounded-xl hover:bg-emerald-700 transition-colors"
          >
            –ó–∞–≤–µ—Ä—à–∏—Ç—å
          </button>
        )}
      </div>
    </div>
  );
}

