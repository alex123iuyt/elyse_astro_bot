"use client";
import { useState, useEffect } from 'react';
import { AdminHeader } from '../../../components/admin/AdminHeader';
import Loader from '../../../components/ui/Loader';

interface PaymentSettings {
  tbank: {
    enabled: boolean;
    merchantId: string;
    secretKey: string;
    testMode: boolean;
    webhookUrl: string;
  };
  general: {
    currency: string;
    autoRenewal: boolean;
    gracePeriod: number;
    refundPolicy: string;
  };
}

export default function PaymentsPage() {
  const [settings, setSettings] = useState<PaymentSettings>({
    tbank: {
      enabled: false,
      merchantId: '',
      secretKey: '',
      testMode: true,
      webhookUrl: ''
    },
    general: {
      currency: 'RUB',
      autoRenewal: true,
      gracePeriod: 3,
      refundPolicy: '7 –¥–Ω–µ–π'
    }
  });

  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [showSecretKey, setShowSecretKey] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadPaymentSettings();
  }, []);

  const loadPaymentSettings = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/admin/payment-settings');
      if (response.ok) {
        const data = await response.json();
        setSettings(data.settings || settings);
      }
    } catch (error) {
      console.error('Error loading payment settings:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSave = async () => {
    setIsSaving(true);
    
    try {
      const response = await fetch('/api/admin/payment-settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(settings)
      });
      
      if (response.ok) {
        alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('Error saving settings:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setIsSaving(false);
    }
  };

  const handleTestConnection = async () => {
    setIsLoading(true);
    
    try {
      const response = await fetch('/api/admin/payment-settings/test-connection', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(settings.tbank)
      });
      
      if (response.ok) {
        const data = await response.json();
        alert(data.message || '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –¢-–ë–∞–Ω–∫–æ–º —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('Connection test error:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –¢-–ë–∞–Ω–∫–æ–º');
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-zinc-900 text-white flex items-center justify-center">
        <Loader size="lg" text="–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏..." fullScreen />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-zinc-900 text-white">
      <AdminHeader title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞" backFallback="/admin/dashboard" />
      
      <div className="p-6 space-y-6">
        {/* Header Actions */}
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold">–ü–ª–∞—Ç–µ–∂–∏ –∏ —ç–∫–≤–∞–π—Ä–∏–Ω–≥</h1>
          <button
            onClick={handleSave}
            disabled={isSaving}
            className="bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-600/50 text-white px-4 py-2 rounded-lg transition-colors flex items-center space-x-2"
          >
            {isSaving ? (
              <>
                <Loader size="sm" />
                <span>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...</span>
              </>
            ) : (
              <>
                <span>üíæ</span>
                <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</span>
              </>
            )}
          </button>
        </div>

        {/* T-Bank Settings */}
        <div className="bg-zinc-800 rounded-lg p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold flex items-center space-x-2">
              <span>üè¶</span>
              <span>–¢-–ë–∞–Ω–∫ —ç–∫–≤–∞–π—Ä–∏–Ω–≥</span>
            </h2>
            <button
              onClick={handleTestConnection}
              disabled={isLoading}
              className="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-600/50 text-white px-3 py-1 rounded text-sm transition-colors"
            >
              {isLoading ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'}
            </button>
          </div>
          
          <div className="space-y-4">
            {/* Enable/Disable */}
            <div className="flex items-center justify-between p-3 bg-zinc-700 rounded-lg">
              <div>
                <h3 className="font-medium">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç–∫–≤–∞–π—Ä–∏–Ω–≥</h3>
                <p className="text-sm text-zinc-400">–í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫</p>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={settings.tbank.enabled}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    tbank: { ...prev.tbank, enabled: e.target.checked }
                  }))}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-zinc-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
              </label>
            </div>

            {/* Test Mode */}
            <div className="flex items-center justify-between p-3 bg-zinc-700 rounded-lg">
              <div>
                <h3 className="font-medium">–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º</h3>
                <p className="text-sm text-zinc-400">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</p>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={settings.tbank.testMode}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    tbank: { ...prev.tbank, testMode: e.target.checked }
                  }))}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-zinc-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
              </label>
            </div>

            {/* Merchant ID */}
            <div className="space-y-2">
              <label className="block text-sm font-medium">Merchant ID</label>
              <input
                type="text"
                value={settings.tbank.merchantId}
                onChange={(e) => setSettings(prev => ({
                  ...prev,
                  tbank: { ...prev.tbank, merchantId: e.target.value }
                }))}
                className="w-full bg-zinc-700 border border-zinc-600 rounded-lg px-3 py-2 text-white placeholder-zinc-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Merchant ID"
              />
            </div>

            {/* Secret Key */}
            <div className="space-y-2">
              <label className="block text-sm font-medium">–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á</label>
              <div className="relative">
                <input
                  type={showSecretKey ? 'text' : 'password'}
                  value={settings.tbank.secretKey}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    tbank: { ...prev.tbank, secretKey: e.target.value }
                  }))}
                  className="w-full bg-zinc-700 border border-zinc-600 rounded-lg px-3 py-2 pr-12 text-white placeholder-zinc-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á"
                />
                <button
                  type="button"
                  onClick={() => setShowSecretKey(!showSecretKey)}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-zinc-400 hover:text-white"
                >
                  {showSecretKey ? 'üôà' : 'üëÅÔ∏è'}
                </button>
              </div>
            </div>

            {/* Webhook URL */}
            <div className="space-y-2">
              <label className="block text-sm font-medium">Webhook URL</label>
              <input
                type="text"
                value={settings.tbank.webhookUrl}
                onChange={(e) => setSettings(prev => ({
                  ...prev,
                  tbank: { ...prev.tbank, webhookUrl: e.target.value }
                }))}
                className="w-full bg-zinc-700 border border-zinc-600 rounded-lg px-3 py-2 text-white placeholder-zinc-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö"
              />
            </div>
          </div>
        </div>

        {/* General Payment Settings */}
        <div className="bg-zinc-800 rounded-lg p-6">
          <h2 className="text-xl font-semibold mb-4">–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          
          <div className="space-y-4">
            {/* Currency */}
            <div className="space-y-2">
              <label className="block text-sm font-medium">–í–∞–ª—é—Ç–∞</label>
              <select
                value={settings.general.currency}
                onChange={(e) => setSettings(prev => ({
                  ...prev,
                  general: { ...prev.general, currency: e.target.value }
                }))}
                className="w-full bg-zinc-700 border border-zinc-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="RUB">–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å (‚ÇΩ)</option>
                <option value="USD">–î–æ–ª–ª–∞—Ä –°–®–ê ($)</option>
                <option value="EUR">–ï–≤—Ä–æ (‚Ç¨)</option>
              </select>
            </div>

            {/* Auto Renewal */}
            <div className="flex items-center justify-between p-3 bg-zinc-700 rounded-lg">
              <div>
                <h3 className="font-medium">–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ</h3>
                <p className="text-sm text-zinc-400">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏</p>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={settings.general.autoRenewal}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    general: { ...prev.general, autoRenewal: e.target.checked }
                  }))}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-zinc-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
              </label>
            </div>

            {/* Grace Period */}
            <div className="space-y-2">
              <label className="block text-sm font-medium">–õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–¥–Ω–∏)</label>
              <input
                type="number"
                value={settings.general.gracePeriod}
                onChange={(e) => setSettings(prev => ({
                  ...prev,
                  general: { ...prev.general, gracePeriod: parseInt(e.target.value) || 0 }
                }))}
                className="w-full bg-zinc-700 border border-zinc-600 rounded-lg px-3 py-2 text-white placeholder-zinc-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ª—å–≥–æ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
                min="0"
                max="30"
              />
            </div>

            {/* Refund Policy */}
            <div className="space-y-2">
              <label className="block text-sm font-medium">–ü–æ–ª–∏—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤</label>
              <select
                value={settings.general.refundPolicy}
                onChange={(e) => setSettings(prev => ({
                  ...prev,
                  general: { ...prev.general, refundPolicy: e.target.value }
                }))}
                className="w-full bg-zinc-700 border border-zinc-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="7 –¥–Ω–µ–π">7 –¥–Ω–µ–π</option>
                <option value="14 –¥–Ω–µ–π">14 –¥–Ω–µ–π</option>
                <option value="30 –¥–Ω–µ–π">30 –¥–Ω–µ–π</option>
                <option value="–ë–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤">–ë–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤</option>
              </select>
            </div>
          </div>
        </div>

        {/* Payment Statistics */}
        <div className="bg-zinc-800 rounded-lg p-6">
          <h2 className="text-xl font-semibold mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-zinc-700 rounded-lg p-4">
              <h3 className="text-lg font-semibold mb-2">–£—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏</h3>
              <p className="text-3xl font-bold text-emerald-400">-</p>
              <p className="text-sm text-zinc-400">–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è</p>
            </div>
            <div className="bg-zinc-700 rounded-lg p-4">
              <h3 className="text-lg font-semibold mb-2">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</h3>
              <p className="text-3xl font-bold text-blue-400">-</p>
              <p className="text-sm text-zinc-400">–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è</p>
            </div>
            <div className="bg-zinc-700 rounded-lg p-4">
              <h3 className="text-lg font-semibold mb-2">–í–æ–∑–≤—Ä–∞—Ç—ã</h3>
              <p className="text-3xl font-bold text-orange-400">-</p>
              <p className="text-sm text-zinc-400">–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
