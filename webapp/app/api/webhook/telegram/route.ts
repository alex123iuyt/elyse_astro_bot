import { NextRequest, NextResponse } from 'next/server';
import { upsertBotUser } from '../../../../lib/bot-users';

export async function POST(request: NextRequest) {
  try {
    const update = await request.json();
    console.log('[TELEGRAM_WEBHOOK] Received update:', JSON.stringify(update, null, 2));

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if (update.message) {
      const message = update.message;
      const user = message.from;
      
      if (user) {
        console.log('[TELEGRAM_WEBHOOK] Processing user:', {
          id: user.id,
          first_name: user.first_name,
          username: user.username
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const botUser = await upsertBotUser(user.id.toString(), {
          name: `${user.first_name || ''} ${user.last_name || ''}`.trim() || `User ${user.id}`,
          username: user.username,
          telegram_id: user.id.toString(),
          is_premium: user.is_premium || false,
          last_active: new Date().toISOString(),
          message_count: 1
        });

        console.log('[TELEGRAM_WEBHOOK] User saved:', botUser);

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
        if (message.text === '/start') {
          await sendTelegramMessage(user.id, 'üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Elyse Astro Bot!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö.');
        }
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
    if (update.callback_query) {
      const callbackQuery = update.callback_query;
      const user = callbackQuery.from;
      
      if (user) {
        console.log('[TELEGRAM_WEBHOOK] Processing callback from user:', user.id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await upsertBotUser(user.id.toString(), {
          last_active: new Date().toISOString()
        });
      }
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error('[TELEGRAM_WEBHOOK] Error processing update:', error);
    return NextResponse.json({ ok: true }); // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ok: true –¥–ª—è Telegram
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId: number, text: string) {
  try {
    const botToken = process.env.BOT_TOKEN;
    if (!botToken) {
      console.error('[TELEGRAM_WEBHOOK] BOT_TOKEN not found');
      return;
    }

    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML'
      }),
    });

    const result = await response.json();
    console.log('[TELEGRAM_WEBHOOK] Message sent:', result);
    
    return result;
  } catch (error) {
    console.error('[TELEGRAM_WEBHOOK] Error sending message:', error);
  }
}

export async function GET(request: NextRequest) {
  return NextResponse.json({ 
    status: 'Telegram webhook endpoint is active',
    timestamp: new Date().toISOString()
  });
}






