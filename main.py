import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0")) if os.getenv("ADMIN_ID") else None
MINIAPP_URL = os.getenv("MINIAPP_URL", "http://localhost:3000")

if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_menu_kb():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø"), KeyboardButton(text="üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")],
            [KeyboardButton(text="üí´ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"), KeyboardButton(text="‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")],
            [KeyboardButton(text="üéØ –ü—Ä–æ–≥–Ω–æ–∑—ã"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return kb

# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è Mini App
def miniapp_inline_kb():
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=MINIAPP_URL)]
        ]
    )
    return kb

@dp.message(CommandStart())
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
        "üîÆ **Elyse Astro Bot** ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø\n"
        "‚Ä¢ –ò–∑—É—á–∏—Ç—å –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n"
        "‚Ä¢ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –±—É–¥—É—â–µ–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=main_menu_kb(),
        parse_mode="Markdown"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
    await message.answer(
        "üåê –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
        reply_markup=miniapp_inline_kb()
    )

@dp.message(F.text == "üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø")
async def horoscope_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    await message.answer(
        "üîÆ **–ì–æ—Ä–æ—Å–∫–æ–ø**\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üëá",
        reply_markup=miniapp_inline_kb(),
        parse_mode="Markdown"
    )

@dp.message(F.text == "üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def lunar_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    await message.answer(
        "üåô **–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å**\n\n"
        "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–∑–∞—Ö –ª—É–Ω—ã –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ üëá",
        reply_markup=miniapp_inline_kb(),
        parse_mode="Markdown"
    )

@dp.message(F.text == "üí´ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞")
async def natal_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    await message.answer(
        "üí´ **–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞**\n\n"
        "–ü–æ—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ üëá",
        reply_markup=miniapp_inline_kb(),
        parse_mode="Markdown"
    )

@dp.message(F.text == "‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
async def compatibility_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    await message.answer(
        "‚ù§Ô∏è **–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å**\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ üëá",
        reply_markup=miniapp_inline_kb(),
        parse_mode="Markdown"
    )

@dp.message(F.text == "üéØ –ü—Ä–æ–≥–Ω–æ–∑—ã")
async def forecasts_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    await message.answer(
        "üéØ **–ü—Ä–æ–≥–Ω–æ–∑—ã**\n\n"
        "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ üëá",
        reply_markup=miniapp_inline_kb(),
        parse_mode="Markdown"
    )

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await message.answer(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ üëá",
        reply_markup=miniapp_inline_kb(),
        parse_mode="Markdown"
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üÜò **–ü–æ–º–æ—â—å**\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n"
        "‚Ä¢ –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n"
        "‚Ä¢ –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
        "‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤\n"
        "‚Ä¢ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n\n"
        "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üëá"
    )
    
    await message.answer(
        help_text,
        reply_markup=miniapp_inline_kb(),
        parse_mode="Markdown"
    )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Elyse Astro Bot...")
    
    if ADMIN_ID:
        try:
            await bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
