import re
import datetime as dt
from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select

from bot.db.session import SessionLocal
from bot.db.models import User
from bot.utils.keyboards import bottom_nav_kb


router = Router()


class Onboarding(StatesGroup):
    name = State()
    bdate = State()
    btime = State()
    bcity = State()


@router.message(CommandStart())
async def start(m: types.Message, state: FSMContext):
    with SessionLocal() as s:
        u = s.execute(select(User).where(User.tg_id == m.from_user.id)).scalar_one_or_none()
        if not u:
            u = User(tg_id=m.from_user.id)
            s.add(u); s.commit()
    await m.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–∏–ª—å.")

    with SessionLocal() as s:
        u = s.execute(select(User).where(User.tg_id == m.from_user.id)).scalar_one_or_none()
    if not u.name:
        await state.set_state(Onboarding.name); await m.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"); return
    if not u.birth_date:
        await state.set_state(Onboarding.bdate); await m.answer("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):"); return
    if not u.birth_time:
        await state.set_state(Onboarding.btime); await m.answer("–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (HH:MM) –∏–ª–∏ '–Ω–µ –∑–Ω–∞—é':"); return
    if not u.birth_city:
        await state.set_state(Onboarding.bcity); await m.answer("–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:"); return

    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ.", reply_markup=bottom_nav_kb())


@router.message(Onboarding.name)
async def ob_name(m: types.Message, state: FSMContext):
    name = (m.text or '').strip()
    if not name:
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è."); return
    with SessionLocal() as s:
        u = s.execute(select(User).where(User.tg_id == m.from_user.id)).scalar_one_or_none()
        u.name = name; s.commit()
    await state.set_state(Onboarding.bdate)
    await m.answer("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")


@router.message(Onboarding.bdate)
async def ob_bdate(m: types.Message, state: FSMContext):
    txt = (m.text or '').strip()
    mobj = re.match(r"^(\d{1,2})[.](\d{1,2})[.](\d{4})$", txt)
    if not mobj:
        await m.answer("–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì"); return
    day, month, year = map(int, mobj.groups())
    try:
        d = dt.date(year, month, day)
    except Exception:
        await m.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."); return
    with SessionLocal() as s:
        u = s.execute(select(User).where(User.tg_id == m.from_user.id)).scalar_one_or_none()
        u.birth_date = d
        # –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–∞
        u.zodiac = _zodiac_by_date(day, month)
        s.commit()
    await state.set_state(Onboarding.btime)
    await m.answer("–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (HH:MM) –∏–ª–∏ '–Ω–µ –∑–Ω–∞—é':")


@router.message(Onboarding.btime)
async def ob_btime(m: types.Message, state: FSMContext):
    txt = (m.text or '').strip().lower()
    if txt != '–Ω–µ –∑–Ω–∞—é' and not re.match(r"^(?:[01]?\d|2[0-3]):[0-5]\d$", txt):
        await m.answer("–§–æ—Ä–º–∞—Ç HH:MM –∏–ª–∏ '–Ω–µ –∑–Ω–∞—é'"); return
    with SessionLocal() as s:
        u = s.execute(select(User).where(User.tg_id == m.from_user.id)).scalar_one_or_none()
        u.birth_time = '–Ω–µ –∑–Ω–∞—é' if txt == '–Ω–µ –∑–Ω–∞—é' else txt
        s.commit()
    await state.set_state(Onboarding.bcity)
    await m.answer("–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:")


@router.message(Onboarding.bcity)
async def ob_bcity(m: types.Message, state: FSMContext):
    city = (m.text or '').strip()
    if not city:
        await m.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è."); return
    with SessionLocal() as s:
        u = s.execute(select(User).where(User.tg_id == m.from_user.id)).scalar_one_or_none()
        u.birth_city = city; s.commit()
    await state.clear()
    await m.answer("–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=bottom_nav_kb())


def _zodiac_by_date(day: int, month: int) -> str:
    ranges = [
        (1, 20, "–í–æ–¥–æ–ª–µ–π"), (2, 19, "–†—ã–±—ã"), (3, 21, "–û–≤–µ–Ω"), (4, 20, "–¢–µ–ª–µ—Ü"),
        (5, 21, "–ë–ª–∏–∑–Ω–µ—Ü—ã"), (6, 22, "–†–∞–∫"), (7, 23, "–õ–µ–≤"), (8, 23, "–î–µ–≤–∞"),
        (9, 23, "–í–µ—Å—ã"), (10, 23, "–°–∫–æ—Ä–ø–∏–æ–Ω"), (11, 22, "–°—Ç—Ä–µ–ª–µ—Ü"),
    ]
    if (month == 12 and day >= 22) or (month == 1 and day <= 19):
        return "–ö–æ–∑–µ—Ä–æ–≥"
    for m, d_start, sign in ranges[::-1]:
        if (month, day) >= (m, d_start):
            return sign
    return "–ö–æ–∑–µ—Ä–æ–≥"














