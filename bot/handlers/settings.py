import re
import datetime as dt
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select
from zoneinfo import ZoneInfo

from bot.db.session import SessionLocal
from bot.db.models import User


router = Router()


class TimeState(StatesGroup):
    wait_time = State()


@router.message(Command("mysign"))
async def mysign(m: types.Message, state: FSMContext):
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú:")


@router.message(FSMContext)  # placeholder; normally you'd add state for this flow
async def _noop(_: types.Message):
    pass


@router.message(Command("–ø—Ä–æ—Ñ–∏–ª—å"))
async def profile(m: types.Message):
    with SessionLocal() as s:
        u = s.execute(select(User).where(User.tg_id == m.from_user.id)).scalar_one_or_none()
    if not u:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ /start"); return
    await m.answer(
        (
            "üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
            f"–ò–º—è: {u.name or '‚Äî'}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {u.birth_date or '‚Äî'}\n"
            f"–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {u.birth_time or '‚Äî'}\n"
            f"–ì–æ—Ä–æ–¥: {u.birth_city or '‚Äî'}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {u.tz}\n"
            f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤: {u.hour:02d}:{u.minute:02d}"
        )
    )














