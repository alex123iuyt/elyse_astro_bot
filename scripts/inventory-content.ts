#!/usr/bin/env tsx

import fs from 'fs';
import path from 'path';
import { glob } from 'glob';

interface ContentItem {
  id: string;
  type: string;
  title: string;
  content: string;
  source: {
    file: string;
    component?: string;
    line?: number;
    context?: string;
  };
  metadata?: Record<string, any>;
}

interface ContentInventory {
  timestamp: string;
  totalItems: number;
  items: ContentItem[];
  summary: {
    byType: Record<string, number>;
    byFile: Record<string, number>;
  };
}

class ContentInventoryScanner {
  private items: ContentItem[] = [];
  private projectRoot: string;

  constructor(projectRoot: string) {
    this.projectRoot = projectRoot;
  }

  async scan(): Promise<ContentInventory> {
    console.log('üîç –°–∫–∞–Ω–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
    
    // –°–∫–∞–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await this.scanWebappContent();
    await this.scanBotContent();
    await this.scanStaticContent();
    
    return this.generateReport();
  }

  private async scanWebappContent() {
    console.log('üì± –°–∫–∞–Ω–∏—Ä—É—é webapp...');
    
    // –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    const componentFiles = await glob('webapp/components/**/*.{tsx,ts}', { cwd: this.projectRoot });
    for (const file of componentFiles) {
      await this.scanFile(file, 'component');
    }

    // –°–∫–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageFiles = await glob('webapp/app/**/*.{tsx,ts}', { cwd: this.projectRoot });
    for (const file of pageFiles) {
      await this.scanFile(file, 'page');
    }

    // –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const dataFiles = await glob('webapp/data/**/*.{ts,js,json}', { cwd: this.projectRoot });
    for (const file of dataFiles) {
      await this.scanFile(file, 'data');
    }
  }

  private async scanBotContent() {
    console.log('ü§ñ –°–∫–∞–Ω–∏—Ä—É—é –±–æ—Ç–∞...');
    
    const botFiles = await glob('bot/**/*.{py,json}', { cwd: this.projectRoot });
    for (const file of botFiles) {
      await this.scanFile(file, 'bot');
    }
  }

  private async scanStaticContent() {
    console.log('üìÑ –°–∫–∞–Ω–∏—Ä—É—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç...');
    
    // –°–∫–∞–Ω–∏—Ä—É–µ–º README –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    const docFiles = await glob('**/*.md', { cwd: this.projectRoot });
    for (const file of docFiles) {
      await this.scanFile(file, 'documentation');
    }
  }

  private async scanFile(filePath: string, context: string) {
    try {
      const fullPath = path.join(this.projectRoot, filePath);
      const content = fs.readFileSync(fullPath, 'utf-8');
      
      // –ò—â–µ–º —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç (–±–∞–∑–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω)
      const russianTextPattern = /[–∞-—è—ë]+/gi;
      const matches = content.match(russianTextPattern);
      
      if (matches && matches.length > 0) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
        const lines = content.split('\n');
        
        for (let i = 0; i < lines.length; i++) {
          const line = lines[i];
          if (russianTextPattern.test(line)) {
            await this.analyzeLine(line.trim(), filePath, context, i + 1);
          }
        }
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ ${filePath}:`, error);
    }
  }

  private async analyzeLine(line: string, filePath: string, context: string, lineNumber: number) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (line.startsWith('//') || line.startsWith('/*') || line.startsWith('#') || !line.trim()) {
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    const contentType = this.detectContentType(line, filePath);
    
    if (contentType) {
      const item: ContentItem = {
        id: `${filePath}:${lineNumber}`,
        type: contentType,
        title: this.extractTitle(line),
        content: line,
        source: {
          file: filePath,
          component: context,
          line: lineNumber,
          context: this.extractContext(line, filePath)
        },
        metadata: this.extractMetadata(line, contentType)
      };
      
      this.items.push(item);
    }
  }

  private detectContentType(line: string, filePath: string): string | null {
    const lowerLine = line.toLowerCase();
    const lowerFile = filePath.toLowerCase();

    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
    if (lowerLine.includes('–ø—Ä–æ–≥–Ω–æ–∑') || lowerLine.includes('—Å–æ–≤–µ—Ç –¥–Ω—è') || lowerLine.includes('–ª—É–Ω–∞ –≤')) {
      return 'DAILY_FORECAST';
    }

    // –°—Ç–æ—Ä–∏—Å—ã
    if (lowerLine.includes('—Å—Ç–æ—Ä–∏—Å') || lowerLine.includes('story') || lowerFile.includes('stories')) {
      return 'STORYLINE';
    }

    // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    if (lowerLine.includes('—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å') || lowerLine.includes('compatibility') || lowerFile.includes('compat')) {
      return 'COMPATIBILITY';
    }

    // –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
    if (lowerLine.includes('–Ω–∞—Ç–∞–ª—å–Ω–∞—è') || lowerLine.includes('natal') || lowerLine.includes('–¥–æ–º') || lowerLine.includes('–∞—Å–ø–µ–∫—Ç')) {
      return 'NATAL_TEMPLATE';
    }

    // –û–Ω–±–æ—Ä–¥–∏–Ω–≥
    if (lowerLine.includes('–æ–Ω–±–æ—Ä–¥–∏–Ω–≥') || lowerLine.includes('onboarding') || lowerLine.includes('–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å')) {
      return 'ONBOARDING_STEP';
    }

    // Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (lowerLine.includes('—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ') || lowerLine.includes('push') || lowerLine.includes('notification')) {
      return 'PUSH_TEMPLATE';
    }

    // –ê—Å—Ç—Ä–æ —Å–æ–±—ã—Ç–∏—è
    if (lowerLine.includes('—Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥') || lowerLine.includes('–Ω–æ–≤–æ–ª—É–Ω–∏–µ') || lowerLine.includes('–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ') || lowerLine.includes('–∏–Ω–≥—Ä–µ—Å—Å–∏—è')) {
      return 'ASTRO_EVENT';
    }

    // UI –∫–æ–ø–∏—Ä–∞–π—Ç
    if (lowerLine.includes('–∫–Ω–æ–ø–∫–∞') || lowerLine.includes('–ø–æ–¥—Å–∫–∞–∑–∫–∞') || lowerLine.includes('–∑–∞–≥–æ–ª–æ–≤–æ–∫') || lowerLine.includes('–æ–ø–∏—Å–∞–Ω–∏–µ')) {
      return 'UI_COPY';
    }

    // –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥
    if (lowerLine.includes('–±–∞–Ω–Ω–µ—Ä') || lowerLine.includes('–∞–∫—Ü–∏—è') || lowerLine.includes('–ø—Ä–æ–º–æ')) {
      return 'MARKETING_BANNER';
    }

    // –°—Ç–∞—Ç—å–∏/FAQ
    if (lowerLine.includes('—Å—Ç–∞—Ç—å—è') || lowerLine.includes('–≥–∞–π–¥') || lowerLine.includes('faq') || lowerLine.includes('–≤–æ–ø—Ä–æ—Å')) {
      return 'ARTICLE';
    }

    return null;
  }

  private extractTitle(line: string): string {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    const cleanLine = line.replace(/['"`]/g, '').trim();
    return cleanLine.length > 100 ? cleanLine.substring(0, 100) + '...' : cleanLine;
  }

  private extractContext(line: string, filePath: string): string {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if (filePath.includes('stories')) return 'stories';
    if (filePath.includes('forecast')) return 'forecast';
    if (filePath.includes('natal')) return 'natal';
    if (filePath.includes('compat')) return 'compatibility';
    if (filePath.includes('onboarding')) return 'onboarding';
    if (filePath.includes('admin')) return 'admin';
    return 'general';
  }

  private extractMetadata(line: string, contentType: string): Record<string, any> {
    const metadata: Record<string, any> = {};
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞
    const zodiacSigns = ['–æ–≤–µ–Ω', '—Ç–µ–ª–µ—Ü', '–±–ª–∏–∑–Ω–µ—Ü—ã', '—Ä–∞–∫', '–ª–µ–≤', '–¥–µ–≤–∞', '–≤–µ—Å—ã', '—Å–∫–æ—Ä–ø–∏–æ–Ω', '—Å—Ç—Ä–µ–ª–µ—Ü', '–∫–æ–∑–µ—Ä–æ–≥', '–≤–æ–¥–æ–ª–µ–π', '—Ä—ã–±—ã'];
    const foundSigns = zodiacSigns.filter(sign => line.toLowerCase().includes(sign));
    if (foundSigns.length > 0) {
      metadata.zodiac = foundSigns;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏
    const domains = ['–ª—é–±–æ–≤—å', '—Ä–∞–±–æ—Ç–∞', '–¥–µ–Ω—å–≥–∏', '–∑–¥–æ—Ä–æ–≤—å–µ', '—Å–µ–º—å—è', '–∫–∞—Ä—å–µ—Ä–∞'];
    const foundDomains = domains.filter(domain => line.toLowerCase().includes(domain));
    if (foundDomains.length > 0) {
      metadata.domains = foundDomains;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã
    const datePattern = /\d{1,2}\.\d{1,2}\.\d{4}/g;
    const dates = line.match(datePattern);
    if (dates) {
      metadata.dates = dates;
    }

    return metadata;
  }

  private generateReport(): ContentInventory {
    const byType: Record<string, number> = {};
    const byFile: Record<string, number> = {};

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for (const item of this.items) {
      byType[item.type] = (byType[item.type] || 0) + 1;
      byFile[item.source.file] = (byFile[item.source.file] || 0) + 1;
    }

    return {
      timestamp: new Date().toISOString(),
      totalItems: this.items.length,
      items: this.items,
      summary: {
        byType,
        byFile
      }
    };
  }
}

async function main() {
  const projectRoot = process.cwd();
  const scanner = new ContentInventoryScanner(projectRoot);
  
  try {
    const inventory = await scanner.scan();
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é .cache –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const cacheDir = path.join(projectRoot, '.cache');
    if (!fs.existsSync(cacheDir)) {
      fs.mkdirSync(cacheDir, { recursive: true });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const outputPath = path.join(cacheDir, 'content-inventory.json');
    fs.writeFileSync(outputPath, JSON.stringify(inventory, null, 2), 'utf-8');
    
    console.log('\n‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${inventory.totalItems} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞`);
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º:');
    Object.entries(inventory.summary.byType).forEach(([type, count]) => {
      console.log(`  ${type}: ${count}`);
    });
    console.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputPath}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}





