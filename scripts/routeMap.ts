#!/usr/bin/env tsx

import fs from 'fs';
import path from 'path';

interface RouteInfo {
  path: string;
  type: 'page' | 'layout' | 'loading' | 'error' | 'not-found';
  file: string;
  isDynamic: boolean;
  isCatchAll: boolean;
  isAdmin: boolean;
}

function scanRoutes(dir: string, basePath: string = ''): RouteInfo[] {
  const routes: RouteInfo[] = [];
  
  if (!fs.existsSync(dir)) return routes;
  
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
      if (item.startsWith('.') || item === 'node_modules' || item === '.next') {
        continue;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞–ø–∫–∏
      if (item.startsWith('[') && item.endsWith(']')) {
        const paramName = item.slice(1, -1);
        const isCatchAll = paramName.startsWith('...');
        
        routes.push({
          path: `${basePath}/[${paramName}]`,
          type: 'page',
          file: fullPath,
          isDynamic: true,
          isCatchAll,
          isAdmin: basePath.startsWith('/admin')
        });
        
        // –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞–ø–∫–∏
        routes.push(...scanRoutes(fullPath, `${basePath}/[${paramName}]`));
      } else {
        // –û–±—ã—á–Ω–∞—è –ø–∞–ø–∫–∞
        const newBasePath = basePath ? `${basePath}/${item}` : `/${item}`;
        routes.push(...scanRoutes(fullPath, newBasePath));
      }
    } else if (stat.isFile()) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å—Ç—Ä–∞–Ω–∏—Ü
      const ext = path.extname(item);
      if (['.tsx', '.ts', '.jsx', '.js'].includes(ext)) {
        const name = path.basename(item, ext);
        let routePath = basePath;
        let type: RouteInfo['type'] = 'page';
        let isDynamic = false;
        let isCatchAll = false;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if (name === 'layout') type = 'layout';
        else if (name === 'loading') type = 'loading';
        else if (name === 'error') type = 'error';
        else if (name === 'not-found') type = 'not-found';
        else if (name === 'page') {
          // –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
          if (basePath === '') routePath = '/';
        } else if (name.startsWith('[') && name.endsWith(']')) {
          // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
          const paramName = name.slice(1, -1);
          isDynamic = true;
          isCatchAll = paramName.startsWith('...');
          routePath = `${basePath}/[${paramName}]`;
        } else {
          // –ò–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
          routePath = `${basePath}/${name}`;
        }
        
        routes.push({
          path: routePath,
          type,
          file: fullPath,
          isDynamic,
          isCatchAll,
          isAdmin: basePath.startsWith('/admin')
        });
      }
    }
  }
  
  return routes;
}

function main() {
  console.log('üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ Next.js App Router...');
  
  const appDir = path.join(process.cwd(), 'webapp', 'app');
  const routes = scanRoutes(appDir);
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—É—Ç–∏
  routes.sort((a, b) => a.path.localeCompare(b.path));
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
  const grouped = {
    pages: routes.filter(r => r.type === 'page'),
    layouts: routes.filter(r => r.type === 'layout'),
    loading: routes.filter(r => r.type === 'loading'),
    error: routes.filter(r => r.type === 'error'),
    notFound: routes.filter(r => r.type === 'not-found')
  };
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`–í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${routes.length}`);
  console.log(`–°—Ç—Ä–∞–Ω–∏—Ü: ${grouped.pages.length}`);
  console.log(`Layouts: ${grouped.layouts.length}`);
  console.log(`Loading: ${grouped.loading.length}`);
  console.log(`Error: ${grouped.error.length}`);
  console.log(`Not Found: ${grouped.notFound.length}`);
  
  console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–ê–†–®–†–£–¢–´:');
  const critical = routes.filter(r => r.isCatchAll || r.path.includes('[...'));
  if (critical.length > 0) {
    critical.forEach(r => {
      console.log(`‚ö†Ô∏è  CATCH-ALL: ${r.path} -> ${r.file}`);
    });
  } else {
    console.log('‚úÖ Catch-all –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  console.log('\nüîê –ê–î–ú–ò–ù–°–ö–ò–ï –ú–ê–†–®–†–£–¢–´:');
  const adminRoutes = routes.filter(r => r.isAdmin);
  adminRoutes.forEach(r => {
    console.log(`üëë ${r.path} -> ${r.file}`);
  });
  
  console.log('\nüìÑ –ü–£–ë–õ–ò–ß–ù–´–ï –°–¢–†–ê–ù–ò–¶–´:');
  const publicPages = grouped.pages.filter(r => !r.isAdmin);
  publicPages.forEach(r => {
    console.log(`üåê ${r.path} -> ${r.file}`);
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
  const outputPath = path.join(process.cwd(), 'route-map-before.json');
  const output = {
    timestamp: new Date().toISOString(),
    totalRoutes: routes.length,
    critical: critical.map(r => ({ path: r.path, file: r.file })),
    admin: adminRoutes.map(r => ({ path: r.path, file: r.file, type: r.type })),
    public: publicPages.map(r => ({ path: r.path, file: r.file, type: r.type })),
    allRoutes: routes.map(r => ({
      path: r.path,
      type: r.type,
      file: r.file,
      isDynamic: r.isDynamic,
      isCatchAll: r.isCatchAll,
      isAdmin: r.isAdmin
    }))
  };
  
  fs.writeFileSync(outputPath, JSON.stringify(output, null, 2));
  console.log(`\nüíæ –ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${outputPath}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  console.log('\nüîç –ê–ù–ê–õ–ò–ó –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:');
  
  const hasGlobalCatchAll = critical.some(r => r.path === '/' || r.path === '/[...slug]');
  if (hasGlobalCatchAll) {
    console.log('‚ùå –ù–ê–ô–î–ï–ù –ì–õ–û–ë–ê–õ–¨–ù–´–ô CATCH-ALL! –≠—Ç–æ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã!');
  } else {
    console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ catch-all –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  const hasAdminInRoot = routes.some(r => r.path === '/' && r.isAdmin);
  if (hasAdminInRoot) {
    console.log('‚ùå –ê–î–ú–ò–ù–°–ö–ò–ô LAYOUT –í –ö–û–†–ù–ï! –≠—Ç–æ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã!');
  } else {
    console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π layout –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ');
  }
  
  const hasDynamicAdmin = adminRoutes.some(r => r.isDynamic);
  if (hasDynamicAdmin) {
    console.log('‚ö†Ô∏è  –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
  }
  
  return output;
}

if (require.main === module) {
  main();
}

export { main, scanRoutes };






