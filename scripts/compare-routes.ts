#!/usr/bin/env tsx

import fs from 'fs';
import path from 'path';

interface RouteMap {
  timestamp: string;
  totalRoutes: number;
  critical: Array<{ path: string; file: string }>;
  admin: Array<{ path: string; file: string; type: string }>;
  public: Array<{ path: string; file: string; type: string }>;
  allRoutes: Array<{
    path: string;
    type: string;
    file: string;
    isDynamic: boolean;
    isCatchAll: boolean;
    isAdmin: boolean;
  }>;
}

function compareRouteMaps() {
  console.log('üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...\n');
  
  const beforePath = path.join(process.cwd(), 'route-map-before.json');
  const afterPath = path.join(process.cwd(), 'route-map-after.json');
  
  if (!fs.existsSync(beforePath) || !fs.existsSync(afterPath)) {
    console.error('‚ùå –§–∞–π–ª—ã –∫–∞—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    return;
  }
  
  const before: RouteMap = JSON.parse(fs.readFileSync(beforePath, 'utf8'));
  const after: RouteMap = JSON.parse(fs.readFileSync(afterPath, 'utf8'));
  
  console.log('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:');
  console.log(`   –î–æ: ${before.totalRoutes} –º–∞—Ä—à—Ä—É—Ç–æ–≤`);
  console.log(`   –ü–æ—Å–ª–µ: ${after.totalRoutes} –º–∞—Ä—à—Ä—É—Ç–æ–≤`);
  console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${after.totalRoutes - before.totalRoutes}`);
  
  console.log('\nüîê –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã:');
  console.log(`   –î–æ: ${before.admin.length}`);
  console.log(`   –ü–æ—Å–ª–µ: ${after.admin.length}`);
  
  console.log('\nüåê –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:');
  console.log(`   –î–æ: ${before.public.length}`);
  console.log(`   –ü–æ—Å–ª–µ: ${after.public.length}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–∞—Ö
  const beforeAdminPaths = before.admin.map(r => r.path);
  const afterAdminPaths = after.admin.map(r => r.path);
  
  const addedAdmin = afterAdminPaths.filter(path => !beforeAdminPaths.includes(path));
  const removedAdmin = beforeAdminPaths.filter(path => !afterAdminPaths.includes(path));
  
  if (addedAdmin.length > 0) {
    console.log('\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã:');
    addedAdmin.forEach(path => console.log(`   ${path}`));
  }
  
  if (removedAdmin.length > 0) {
    console.log('\n‚ûñ –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã:');
    removedAdmin.forEach(path => console.log(`   ${path}`));
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
  console.log('\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã:');
  if (before.critical.length === 0 && after.critical.length === 0) {
    console.log('‚úÖ Catch-all –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –¥–æ, –Ω–∏ –ø–æ—Å–ª–µ');
  } else {
    console.log(`   –î–æ: ${before.critical.length}`);
    console.log(`   –ü–æ—Å–ª–µ: ${after.critical.length}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
  const beforePublicPaths = before.public.filter(r => !r.path.startsWith('/api/')).map(r => r.path);
  const afterPublicPaths = after.public.filter(r => !r.path.startsWith('/api/')).map(r => r.path);
  
  const removedPublic = beforePublicPaths.filter(path => !afterPublicPaths.includes(path));
  const addedPublic = afterPublicPaths.filter(path => !beforePublicPaths.includes(path));
  
  if (removedPublic.length > 0) {
    console.log('\n‚ùå –£–î–ê–õ–ï–ù–´ –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ê–†–®–†–£–¢–´:');
    removedPublic.forEach(path => console.log(`   ${path}`));
  }
  
  if (addedPublic.length > 0) {
    console.log('\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:');
    addedPublic.forEach(path => console.log(`   ${path}`));
  }
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:');
  
  const hasCriticalIssues = after.critical.length > 0;
  const hasRemovedPublic = removedPublic.length > 0;
  const hasAdminInRoot = after.allRoutes.some(r => r.path === '/' && r.isAdmin);
  
  if (hasCriticalIssues) {
    console.log('‚ùå –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: catch-all –º–∞—Ä—à—Ä—É—Ç—ã');
  } else {
    console.log('‚úÖ Catch-all –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  if (hasRemovedPublic) {
    console.log('‚ùå –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: —É–¥–∞–ª–µ–Ω—ã –ø—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã');
  } else {
    console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  }
  
  if (hasAdminInRoot) {
    console.log('‚ùå –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: –∞–¥–º–∏–Ω—Å–∫–∏–π layout –≤ –∫–æ—Ä–Ω–µ');
  } else {
    console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π layout –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω');
  }
  
  if (!hasCriticalIssues && !hasRemovedPublic && !hasAdminInRoot) {
    console.log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ú–∞—Ä—à—Ä—É—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.');
  }
}

if (require.main === module) {
  compareRouteMaps();
}

export { compareRouteMaps };



