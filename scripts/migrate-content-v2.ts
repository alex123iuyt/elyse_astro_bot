#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client';
import { execSync } from 'child_process';
import path from 'path';

const prisma = new PrismaClient();

async function main() {
  console.log('üöÄ Starting Content V2 migration...');
  
  try {
    // 1. Generate and apply Prisma migrations
    console.log('üì¶ Generating Prisma client...');
    execSync('npx prisma generate', { stdio: 'inherit' });
    
    console.log('üóÑÔ∏è Running database migrations...');
    execSync('npx prisma db push', { stdio: 'inherit' });
    
    // 2. Create system user if not exists
    console.log('üë§ Creating system user...');
    const systemUser = await prisma.user.upsert({
      where: { email: 'system@elyse.astro' },
      update: {},
      create: {
        email: 'system@elyse.astro',
        name: 'System User',
        role: 'ADMIN'
      }
    });
    
    console.log(`‚úÖ System user: ${systemUser.id}`);
    
    // 3. Create sample content types
    console.log('üìù Creating sample content...');
    
    // Sample daily forecast
    const dailyForecast = await prisma.content.create({
      data: {
        type: 'DAILY_FORECAST',
        title: '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –û–≤–Ω–∞',
        summary: '–°–µ–≥–æ–¥–Ω—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π',
        status: 'PUBLISHED',
        visibility: 'PUBLIC',
        locale: 'ru',
        sign: 'ARIES',
        effectiveDate: new Date(),
        authorId: systemUser.id,
        meta: {
          moonPhase: '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞',
          bestTime: '09:00-12:00',
          avoidTime: '15:00-18:00'
        }
      }
    });
    
    console.log(`‚úÖ Daily forecast: ${dailyForecast.id}`);
    
    // Sample story
    const story = await prisma.content.create({
      data: {
        type: 'STORIES',
        title: '–°–æ–≤–µ—Ç –¥–Ω—è: –û—á–∏—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
        summary: '–°–µ—Ä–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –æ—á–∏—â–µ–Ω–∏—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –¥–æ–º–∞',
        status: 'PUBLISHED',
        visibility: 'PUBLIC',
        locale: 'ru',
        sign: 'ARIES',
        effectiveDate: new Date(),
        authorId: systemUser.id,
        body: [
          {
            id: '1',
            type: 'text',
            content: '–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç',
            durationMs: 5000
          },
          {
            id: '2',
            type: 'text',
            content: '–ó–∞–∂–≥–∏—Ç–µ –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–≤–µ—á—É –∏–ª–∏ –±–ª–∞–≥–æ–≤–æ–Ω–∏—è',
            durationMs: 5000
          },
          {
            id: '3',
            type: 'cta',
            content: '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é 10 –º–∏–Ω—É—Ç',
            durationMs: 8000
          }
        ],
        meta: {
          stepsCount: 3,
          totalDuration: 18000
        }
      }
    });
    
    console.log(`‚úÖ Story: ${story.id}`);
    
    // Sample moon calendar
    const moonCalendar = await prisma.content.create({
      data: {
        type: 'MOON_CALENDAR',
        title: '–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
        summary: '–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–Ω—è',
        status: 'PUBLISHED',
        visibility: 'PUBLIC',
        locale: 'ru',
        effectiveDate: new Date(),
        authorId: systemUser.id,
        meta: {
          moonPhase: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
          moonSign: '–í–µ—Å—ã',
          bestTime: '06:00-09:00',
          avoidTime: '21:00-00:00'
        }
      }
    });
    
    console.log(`‚úÖ Moon calendar: ${moonCalendar.id}`);
    
    // Sample compatibility
    const compatibility = await prisma.content.create({
      data: {
        type: 'COMPATIBILITY',
        title: '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –û–≤–µ–Ω –∏ –¢–µ–ª–µ—Ü',
        summary: '–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞',
        status: 'PUBLISHED',
        visibility: 'PUBLIC',
        locale: 'ru',
        sign: 'ARIES',
        signB: 'TAURUS',
        authorId: systemUser.id,
        meta: {
          score: 75,
          strengths: ['–≠–Ω–µ—Ä–≥–∏—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', '–°–º–µ–ª–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å'],
          challenges: ['–ò–º–ø—É–ª—å—Å–∏–≤–Ω–æ—Å—Ç—å vs –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å'],
          advice: '–ù–∞–π–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ–º'
        }
      }
    });
    
    console.log(`‚úÖ Compatibility: ${compatibility.id}`);
    
    // Sample domain forecast
    const domainForecast = await prisma.content.create({
      data: {
        type: 'DOMAIN_FORECAST',
        title: '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∫–∞—Ä—å–µ—Ä–µ –¥–ª—è –û–≤–Ω–∞',
        summary: '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ',
        status: 'PUBLISHED',
        visibility: 'PUBLIC',
        locale: 'ru',
        sign: 'ARIES',
        effectiveDate: new Date(),
        authorId: systemUser.id,
        meta: {
          domain: 'career',
          house: 10,
          opportunities: ['–ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã', '–ü–æ–≤—ã—à–µ–Ω–∏–µ'],
          challenges: ['–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –∫–æ–ª–ª–µ–≥–∞–º–∏'],
          advice: '–ü—Ä–æ—è–≤–ª—è–π—Ç–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –∫–æ–º–∞–Ω–¥–µ'
        }
      }
    });
    
    console.log(`‚úÖ Domain forecast: ${domainForecast.id}`);
    
    // 4. Create sample templates
    console.log('üìã Creating sample templates...');
    
    const dailyForecastTemplate = await prisma.template.create({
      data: {
        type: 'DAILY_FORECAST',
        locale: 'ru',
        name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑',
        bodyJson: {
          structure: [
            { type: 'greeting', text: '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {{sign}}!' },
            { type: 'mood', text: '–°–µ–≥–æ–¥–Ω—è {{moonPhase}} —Å–æ–∑–¥–∞–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É {{mood}}' },
            { type: 'advice', text: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {{advice}}' },
            { type: 'warning', text: '–ò–∑–±–µ–≥–∞–π—Ç–µ: {{warning}}' },
            { type: 'closing', text: '–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è!' }
          ]
        },
        variables: ['sign', 'moonPhase', 'mood', 'advice', 'warning']
      }
    });
    
    console.log(`‚úÖ Daily forecast template: ${dailyForecastTemplate.id}`);
    
    const storyTemplate = await prisma.template.create({
      data: {
        type: 'STORIES',
        locale: 'ru',
        name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è-—Å–æ–≤–µ—Ç',
        bodyJson: {
          structure: [
            { type: 'intro', text: '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Å–æ–≤–µ—Ç –¥–ª—è {{sign}}' },
            { type: 'main', text: '{{mainAdvice}}' },
            { type: 'action', text: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {{action}}' },
            { type: 'motivation', text: '{{motivation}}' }
          ]
        },
        variables: ['sign', 'mainAdvice', 'action', 'motivation']
      }
    });
    
    console.log(`‚úÖ Story template: ${storyTemplate.id}`);
    
    // 5. Create audit logs
    console.log('üìä Creating audit logs...');
    
    await prisma.auditLog.createMany({
      data: [
        {
          entityType: 'CONTENT',
          entityId: dailyForecast.id,
          action: 'CREATE',
          userId: systemUser.id,
          details: { type: 'DAILY_FORECAST', sign: 'ARIES' }
        },
        {
          entityType: 'CONTENT',
          entityId: story.id,
          action: 'CREATE',
          userId: systemUser.id,
          details: { type: 'STORIES', stepsCount: 3 }
        },
        {
          entityType: 'CONTENT',
          entityId: moonCalendar.id,
          action: 'CREATE',
          userId: systemUser.id,
          details: { type: 'MOON_CALENDAR' }
        }
      ]
    });
    
    console.log('‚úÖ Audit logs created');
    
    // 6. Summary
    console.log('\nüéâ Migration completed successfully!');
    console.log('üìä Summary:');
    console.log(`   - Content items: 5`);
    console.log(`   - Templates: 2`);
    console.log(`   - Audit logs: 3`);
    console.log(`   - System user: ${systemUser.id}`);
    
    console.log('\nüîç Next steps:');
    console.log('   1. Verify the content in the admin panel');
    console.log('   2. Test the story viewer component');
    console.log('   3. Check that all content types are working');
    console.log('   4. Test the generation and copy functionality');
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main();






