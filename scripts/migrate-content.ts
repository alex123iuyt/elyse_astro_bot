#!/usr/bin/env tsx

import { PrismaClient, ContentType, PublishStatus, Visibility } from '@prisma/client';

const prisma = new PrismaClient();

async function migrateContent() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');

  try {
    // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let systemUser = await prisma.user.findUnique({
      where: { email: 'system@elyse.local' },
    });

    if (!systemUser) {
      systemUser = await prisma.user.create({
        data: {
          email: 'system@elyse.local',
          name: 'System',
          role: 'ADMIN',
        },
      });
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    }

    // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü
    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à—É —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    
    console.log('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');

    // –ü—Ä–∏–º–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è daily-forecast
    const dailyForecasts = [
      {
        type: ContentType.DAILY_FORECAST,
        title: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: –õ—É–Ω–∞ –≤ –†–∞–∫–µ',
        effectiveDate: new Date('2025-01-15'),
        sign: 'CANCER',
        status: PublishStatus.PUBLISHED,
        visibility: Visibility.PUBLIC,
        locale: 'ru',
        body: {
          blocks: [
            {
              type: 'text',
              content: '–°–µ–≥–æ–¥–Ω—è –õ—É–Ω–∞ –≤ –†–∞–∫–µ —Å–æ–∑–¥–∞–µ—Ç –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è...',
            },
          ],
        },
        summary: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑',
        tags: ['–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π', '–ø—Ä–æ–≥–Ω–æ–∑', '–ª—É–Ω–∞'],
        meta: {
          moonPhase: '—Ä–∞—Å—Ç—É—â–∞—è',
          moonSign: 'CANCER',
          house: 4,
        },
      },
      {
        type: ContentType.DAILY_ADVICE_HOME,
        title: '–°–æ–≤–µ—Ç –¥–Ω—è –ø–æ –¥–æ–º—É: –û–≤–µ–Ω',
        effectiveDate: new Date('2025-01-15'),
        sign: 'ARIES',
        status: PublishStatus.PUBLISHED,
        visibility: Visibility.PUBLIC,
        locale: 'ru',
        body: {
          blocks: [
            {
              type: 'text',
              content: '–°–µ–≥–æ–¥–Ω—è –û–≤–Ω–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–Ω—è—Ç—å—Å—è...',
            },
          ],
        },
        summary: '–°–æ–≤–µ—Ç –¥–Ω—è –¥–ª—è –û–≤–Ω–æ–≤',
        tags: ['—Å–æ–≤–µ—Ç', '–¥–æ–º', '–æ–≤–µ–Ω'],
        meta: {
          house: 1,
          domain: 'home',
        },
      },
    ];

    console.log('üìù –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...');

    for (const forecast of dailyForecasts) {
      try {
        await prisma.content.create({
          data: {
            ...forecast,
            authorId: systemUser.id,
            version: 1,
          },
        });
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω: ${forecast.title}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${forecast.title}:`, error.message);
      }
    }

    // –°–æ–∑–¥–∞–µ–º UI —Ç–µ–∫—Å—Ç—ã
    const uiTexts = [
      {
        type: ContentType.UI_TEXT,
        slug: 'home.title',
        title: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        body: 'Elyse Astro - –í–∞—à –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫',
        status: PublishStatus.PUBLISHED,
        visibility: Visibility.PUBLIC,
        locale: 'ru',
        meta: {
          category: 'navigation',
          placement: 'home',
        },
      },
      {
        type: ContentType.UI_TEXT,
        slug: 'cta.orderNow',
        title: '–ö–Ω–æ–ø–∫–∞ –∑–∞–∫–∞–∑–∞',
        body: '–ó–∞–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å',
        status: PublishStatus.PUBLISHED,
        visibility: Visibility.PUBLIC,
        locale: 'ru',
        meta: {
          category: 'button',
          placement: 'cta',
        },
      },
    ];

    console.log('üî§ –°–æ–∑–¥–∞–µ–º UI —Ç–µ–∫—Å—Ç—ã...');

    for (const text of uiTexts) {
      try {
        await prisma.content.create({
          data: {
            ...text,
            authorId: systemUser.id,
            version: 1,
          },
        });
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω UI —Ç–µ–∫—Å—Ç: ${text.slug}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UI —Ç–µ–∫—Å—Ç–∞ ${text.slug}:`, error.message);
      }
    }

    // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const templates = [
      {
        type: ContentType.DAILY_FORECAST,
        locale: 'ru',
        name: 'default',
        bodyJson: {
          blocks: [
            {
              type: 'text',
              content: '–°–µ–≥–æ–¥–Ω—è {sign} –º–æ–∂–µ—Ç –æ–∂–∏–¥–∞—Ç—å {prediction}. {advice}',
            },
          ],
        },
        variables: ['sign', 'prediction', 'advice'],
        isActive: true,
      },
      {
        type: ContentType.DAILY_ADVICE_HOME,
        locale: 'ru',
        name: 'default',
        bodyJson: {
          blocks: [
            {
              type: 'text',
              content: '–î–ª—è {sign} —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è {activity}',
            },
          ],
        },
        variables: ['sign', 'activity'],
        isActive: true,
      },
    ];

    console.log('üìã –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã...');

    for (const template of templates) {
      try {
        await prisma.template.create({
          data: template,
        });
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω: ${template.type} - ${template.name}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ ${template.type}:`, error.message);
      }
      }
    }

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`- –°–æ–∑–¥–∞–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${dailyForecasts.length + uiTexts.length}`);
    console.log(`- –°–æ–∑–¥–∞–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: ${templates.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateContent();


